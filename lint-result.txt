lyovsoncom main  ? ❯ pnpm biome lint --write  --unsafe --max-diagnostics=500
next.config.ts:12:40 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    11 │ // Image quality presets for Next.js Image Optimization
  > 12 │ const IMAGE_QUALITIES: number[] = [25, 50, 75, 80, 90, 100];
       │                                        ^^
    13 │
    14 │ const NEXT_PUBLIC_SERVER_URL = process.env.VERCEL_PROJECT_PRODUCTION_URL

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


next.config.ts:12:44 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    11 │ // Image quality presets for Next.js Image Optimization
  > 12 │ const IMAGE_QUALITIES: number[] = [25, 50, 75, 80, 90, 100];
       │                                            ^^
    13 │
    14 │ const NEXT_PUBLIC_SERVER_URL = process.env.VERCEL_PROJECT_PRODUCTION_URL

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


next.config.ts:12:48 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    11 │ // Image quality presets for Next.js Image Optimization
  > 12 │ const IMAGE_QUALITIES: number[] = [25, 50, 75, 80, 90, 100];
       │                                                ^^
    13 │
    14 │ const NEXT_PUBLIC_SERVER_URL = process.env.VERCEL_PROJECT_PRODUCTION_URL

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


next.config.ts:12:52 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    11 │ // Image quality presets for Next.js Image Optimization
  > 12 │ const IMAGE_QUALITIES: number[] = [25, 50, 75, 80, 90, 100];
       │                                                    ^^
    13 │
    14 │ const NEXT_PUBLIC_SERVER_URL = process.env.VERCEL_PROJECT_PRODUCTION_URL

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


next.config.ts:12:56 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                                                                                      ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    11 │ // Image quality presets for Next.js Image Optimization
  > 12 │ const IMAGE_QUALITIES: number[] = [25, 50, 75, 80, 90, 100];
       │                                                        ^^^
    13 │
    14 │ const NEXT_PUBLIC_SERVER_URL = process.env.VERCEL_PROJECT_PRODUCTION_URL

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


next.config.ts:12:36 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    11 │ // Image quality presets for Next.js Image Optimization
  > 12 │ const IMAGE_QUALITIES: number[] = [25, 50, 75, 80, 90, 100];                      │                                    ^^
    13 │
    14 │ const NEXT_PUBLIC_SERVER_URL = process.env.VERCEL_PROJECT_PRODUCTION_URL

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/(frontend)/playground/skeleton/page.tsx:8:16 lint/suspicious/useAwait ━━━━━━━━━━

  ⚠ This async function lacks an await expression.
     6 │ import { SkeletonCard, SkeletonGrid } from "@/components/grid/skeleton";
     7 │
   > 8 │ export default async function SkeletonPlayground() {
       │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 9 │   "use cache";
        ...
  > 35 │   );
  > 36 │ }
       │ ^
    37 │
    38 │ export const metadata: Metadata = {

  ℹ Remove this async modifier, or add an await expression in the function.

     6 │ import { SkeletonCard, SkeletonGrid } from "@/components/grid/skeleton";
     7 │
   > 8 │ export default async function SkeletonPlayground() {
       │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 9 │   "use cache";
        ...
  > 35 │   );
  > 36 │ }
       │ ^
    37 │
    38 │ export const metadata: Metadata = {
                                                                                      ℹ Async functions without await expressions may not need to be declared async.


src/app/(frontend)/posts/page.tsx:23:41 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    21 │   cacheLife("posts");
    22 │
  > 23 │   const response = await getLatestPosts(12);
       │                                         ^^
    24 │
    25 │   if (!response) {

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/(frontend)/posts/page/[pageNumber]/page.tsx:36:65 lint/style/noMagicNumbers ━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    34 │   }
    35 │
  > 36 │   const response = await getPaginatedPosts(sanitizedPageNumber, 12);
       │                                                                 ^^
    37 │
    38 │   if (!response) {
                                                                                      ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/(frontend)/posts/page/[pageNumber]/page.tsx:105:25 lint/style/noMagicNumbers ━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    103 │     },
    104 │     robots: {
  > 105 │       index: pageNum <= 3, // Only index first 3 pages to avoid duplicate content issues
        │                         ^
    106 │       follow: true,                                                           107 │       noarchive: pageNum > 1, // Don't archive pagination pages

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/(frontend)/posts/page/[pageNumber]/page.tsx:118:44 lint/style/noMagicNumbers ━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    117 │   const { totalDocs } = await getPostCount();
  > 118 │   const totalPages = Math.ceil(totalDocs / 12);
        │                                            ^^
    119 │                                                                               120 │   const pages: { pageNumber: string }[] = [];

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/(frontend)/privacy-policy/page.tsx:7:16 lint/suspicious/useAwait ━━━━━━━━━━━

  ⚠ This async function lacks an await expression.
                                                                                          5 │ } from "next/cache";
      6 │
    > 7 │ export default async function PrivacyPolicy() {
        │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    > 8 │   "use cache";
         ...                                                                          > 249 │   );
  > 250 │ }
        │ ^
    251 │
    252 │ export const metadata: Metadata = {

  ℹ Remove this async modifier, or add an await expression in the function.

      5 │ } from "next/cache";
      6 │
    > 7 │ export default async function PrivacyPolicy() {
        │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    > 8 │   "use cache";
         ...
  > 249 │   );
  > 250 │ }
        │ ^
    251 │
    252 │ export const metadata: Metadata = {

  ℹ Async functions without await expressions may not need to be declared async.


src/app/(frontend)/search/page.tsx:17:16 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    15 │ };
    16 │
  > 17 │ export default async function SuspendedSearchPage({
       │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 18 │   searchParams: searchParamsPromise,
        ...
  > 24 │   );
  > 25 │ }
       │ ^
    26 │
    27 │ async function SearchPage({ searchParams: searchParamsPromise }: Args) {

  ℹ Remove this async modifier, or add an await expression in the function.

    15 │ };
    16 │
  > 17 │ export default async function SuspendedSearchPage({
       │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 18 │   searchParams: searchParamsPromise,
        ...
  > 24 │   );
  > 25 │ }
       │ ^
    26 │
    27 │ async function SearchPage({ searchParams: searchParamsPromise }: Args) {

  ℹ Async functions without await expressions may not need to be declared async.


src/app/(frontend)/subscription-confirmed/page.tsx:8:16 lint/suspicious/useAwait ━━━━━━━━━━

  ⚠ This async function lacks an await expression.

     6 │ import { GridCardSubscribeConfirmed } from "@/components/grid";
     7 │
   > 8 │ export default async function SubscriptionConfirmed() {
       │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 9 │   "use cache";
        ...
  > 13 │   return <GridCardSubscribeConfirmed />;
  > 14 │ }
       │ ^
    15 │
    16 │ export const metadata: Metadata = {

  ℹ Remove this async modifier, or add an await expression in the function.

     6 │ import { GridCardSubscribeConfirmed } from "@/components/grid";
     7 │
   > 8 │ export default async function SubscriptionConfirmed() {
       │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 9 │   "use cache";
        ...
  > 13 │   return <GridCardSubscribeConfirmed />;
  > 14 │ }
       │ ^
    15 │
    16 │ export const metadata: Metadata = {

  ℹ Async functions without await expressions may not need to be declared async.


src/app/(payload)/layout.tsx:16:46 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    14 │ };
    15 │
  > 16 │ const serverFunction: ServerFunctionClient = async (args) => {                    │                                              ^^^^^^^^^^^^^^^^^
  > 17 │   "use server";
        ...
  > 22 │   });
  > 23 │ };
       │ ^
    24 │
    25 │ const Layout = ({ children }: Args) => (

  ℹ Remove this async modifier, or add an await expression in the function.

    14 │ };
    15 │
  > 16 │ const serverFunction: ServerFunctionClient = async (args) => {
       │                                              ^^^^^^^^^^^^^^^^^
  > 17 │   "use server";
        ...
  > 22 │   });
  > 23 │ };
       │ ^
    24 │
    25 │ const Layout = ({ children }: Args) => (

  ℹ Async functions without await expressions may not need to be declared async.

src/app/.well-known/ai-resources/route.ts:3:8 lint/suspicious/useAwait ━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.
      1 │ import type { NextRequest } from "next/server";
      2 │
    > 3 │ export async function GET(_request: NextRequest) {
        │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    > 4 │   const SITE_URL = process.env.NEXT_PUBLIC_SERVER_URL || "https://lyovson.com";
         ...
  > 150 │     },
  > 151 │   });
  > 152 │ }
        │ ^
    153 │

  ℹ Remove this async modifier, or add an await expression in the function.
      1 │ import type { NextRequest } from "next/server";
      2 │
    > 3 │ export async function GET(_request: NextRequest) {
        │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    > 4 │   const SITE_URL = process.env.NEXT_PUBLIC_SERVER_URL || "https://lyovson.com";
         ...
  > 150 │     },
  > 151 │   });
  > 152 │ }
        │ ^
    153 │

  ℹ Async functions without await expressions may not need to be declared async.


src/app/api/confirm-subscription/route.ts:43:18 lint/style/noNonNullAssertion ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.

    42 │     // Check if token is expired
  > 43 │     if (new Date(contact.confirmationExpiry!) < new Date()) {
       │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    44 │       return NextResponse.json(
    45 │         { error: "Confirmation link has expired" },


src/app/api/confirm-subscription/route.ts:56:19 lint/style/noNonNullAssertion ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.

    54 │       lastName: contact.lastName || undefined,
    55 │       unsubscribed: false,
  > 56 │       audienceId: process.env.RESEND_AUDIENCE_ID!,
       │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    57 │     });
    58 │


src/app/api/embeddings/notes/[id]/route.ts:47:23 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 26 detected (max: 15).

    45 │ };
    46 │
  > 47 │ export async function GET(
       │                       ^^^
    48 │   request: NextRequest,
    49 │   { params: paramsPromise }: Args

  ℹ Please refactor this function to reduce its complexity score from 26 to the max allowed complexity 15.


src/app/api/embeddings/notes/[id]/route.ts:174:47 lint/style/noMagicNumbers ━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    172 │     const contentText = extractNotesText(note);
    173 │     const wordCount = contentText.split(WORD_SPLIT_REGEX).length;
  > 174 │     const readingTime = Math.ceil(wordCount / 200); // ~200 words per minute
        │                                               ^^^
    175 │
    176 │     // Format response based on requested format

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/posts/[id]/route.ts:50:23 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 26 detected (max: 15).

    48 │ };
    49 │
  > 50 │ export async function GET(
       │                       ^^^
    51 │   request: NextRequest,
    52 │   { params: paramsPromise }: Args

  ℹ Please refactor this function to reduce its complexity score from 26 to the max allowed complexity 15.


src/app/api/embeddings/route.ts:56:52 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    54 │     if (id && type) {
    55 │       // TODO: Properly type this as union of Post | Note | Project with embedding fields
  > 56 │       let item: ItemWithEmbedding | null = null as any;
       │                                                    ^^^
    57 │
    58 │       if (type === "posts") {

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:248:58 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    246 │               ?.map((t: any) => (typeof t === "object" ? t.name : t))
    247 │               .filter(Boolean),
  > 248 │             authors: post.populatedAuthors?.map((author: any) => ({
        │                                                          ^^^
    249 │               name: author.name,
    250 │               username: author.username,

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:14:23 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 70 detected (max: 15).

    12 │ };
    13 │
  > 14 │ export async function GET(request: NextRequest) {
       │                       ^^^
    15 │   const { searchParams } = new URL(request.url);
    16 │   const type = searchParams.get("type"); // 'posts', 'projects', 'all'

  ℹ Please refactor this function to reduce its complexity score from 70 to the max allowed complexity 15.


src/app/api/embeddings/route.ts:23:5 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    21 │   const limit = Math.min(
    22 │     Number.parseInt(searchParams.get("limit") || "50", 10),
  > 23 │     100
       │     ^^^
    24 │   );
    25 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/route.ts:118:42 lint/style/noNestedTernary ━━━━━━━━━━━━━━━━━━

  ⚠ Do not nest ternary expressions.

    116 │         // Extract text content for embedding
    117 │         const title =
  > 118 │           "title" in item ? item.title : "name" in item ? item.name : "";
        │                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    119 │         const description = "description" in item ? item.description : "";
    120 │         const textToEmbed = [title, description].filter(Boolean).join(" ");

  ℹ Nesting ternary expressions can make code more difficult to understand.

  ℹ Convert nested ternary expression into if-else statements or separate the conditions to make the logic easier to understand.


src/app/api/embeddings/route.ts:134:49 lint/style/noNestedTernary ━━━━━━━━━━━━━━━━━━

  ⚠ Do not nest ternary expressions.

    132 │         dimensions,
    133 │         metadata: {
  > 134 │           title: "title" in item ? item.title : "name" in item ? item.name : "",
        │                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    135 │           slug: item.slug,
    136 │           ...(includeContent &&

  ℹ Nesting ternary expressions can make code more difficult to understand.

  ℹ Convert nested ternary expression into if-else statements or separate the conditions to make the logic easier to understand.


src/app/api/embeddings/route.ts:138:35 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    136 │           ...(includeContent &&
    137 │             type === "posts" && {
  > 138 │               wordCount: (item as any).embedding_generated_at
        │                                   ^^^
    139 │                 ? "available"
    140 │                 : "not-computed",

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:150:60 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    148 │           ...(type === "posts" &&
    149 │             "populatedAuthors" in item && {
  > 150 │               authors: item.populatedAuthors?.map((author: any) => ({
        │                                                            ^^^
    151 │                 name: author.name,
    152 │                 username: author.username,

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:163:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    161 │                 "topics" in item
    162 │                   ? item.topics
  > 163 │                       ?.map((t: any) =>
        │                                 ^^^
    164 │                         typeof t === "object"
    165 │                           ? { name: t.name, slug: t.slug }

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:183:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    181 │           "Cache-Control": "public, max-age=7200, s-maxage=7200", // Cache individual embeddings longer
    182 │           "Access-Control-Allow-Origin": "*",
  > 183 │           "X-Embedding-Source": (item as any).embedding_vector
        │                                          ^^^
    184 │             ? "pre-computed"
    185 │             : "on-demand",

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:191:11 lint/suspicious/noEvolvingTypes ━━━━━━━━━━━━━

  ⚠ The type of this variable may evolve implicitly to any type, including the any type.

    190 │     // Handle bulk embeddings
  > 191 │     const embeddings = [];
        │           ^^^^^^^^^^
    192 │
    193 │     if (type === "posts" || type === "all") {

  ℹ Add an explicit type or initialization to avoid implicit type evolution.


src/app/api/embeddings/route.ts:217:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    215 │         let dimensions = 0;
    216 │
  > 217 │         if ((post as any).embedding_vector) {
        │                      ^^^
    218 │           // Use pre-computed embedding - parse pgvector format
    219 │           const vectorString = (post as any).embedding_vector;

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:219:41 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    217 │         if ((post as any).embedding_vector) {
    218 │           // Use pre-computed embedding - parse pgvector format
  > 219 │           const vectorString = (post as any).embedding_vector;
        │                                         ^^^
    220 │           embedding =
    221 │             typeof vectorString === "string"

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:224:28 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    222 │               ? JSON.parse(vectorString)
    223 │               : vectorString;
  > 224 │           model = (post as any).embedding_model || "pre-computed";
        │                            ^^^
    225 │           dimensions = (post as any).embedding_dimensions || embedding.length;
    226 │         } else {

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:225:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    223 │               : vectorString;
    224 │           model = (post as any).embedding_model || "pre-computed";
  > 225 │           dimensions = (post as any).embedding_dimensions || embedding.length;
        │                                 ^^^
    226 │         } else {
    227 │           // Skip posts without pre-computed embeddings in bulk requests

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/route.ts:246:25 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    244 │             lastModified: post.updatedAt,
    245 │             topics: post.topics
  > 246 │               ?.map((t: any) => (typeof t === "object" ? t.name : t))
        │                         ^^^
    247 │               .filter(Boolean),
    248 │             authors: post.populatedAuthors?.map((author: any) => ({

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/status/route.ts:84:59 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    82 │     });
    83 │
  > 84 │     const modelStats = sampleEmbeddings.docs.reduce((acc: any, post: any) => {
       │                                                           ^^^
    85 │       const model = post.embedding_model || "unknown";
    86 │       acc[model] = (acc[model] || 0) + 1;

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/status/route.ts:84:70 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    82 │     });
    83 │
  > 84 │     const modelStats = sampleEmbeddings.docs.reduce((acc: any, post: any) => {
       │                                                                      ^^^
    85 │       const model = post.embedding_model || "unknown";
    86 │       acc[model] = (acc[model] || 0) + 1;

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/status/route.ts:105:50 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    103 │           ? "text-embedding-3-small"
    104 │           : "fallback-hash",
  > 105 │         dimensions: process.env.OPENAI_API_KEY ? 1536 : 384,
        │                                                  ^^^^
    106 │         pgvectorEnabled: true,
    107 │         collectionsSupported: ["posts", "books", "notes"],

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/status/route.ts:105:57 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    103 │           ? "text-embedding-3-small"
    104 │           : "fallback-hash",
  > 105 │         dimensions: process.env.OPENAI_API_KEY ? 1536 : 384,
        │                                                         ^^^
    106 │         pgvectorEnabled: true,
    107 │         collectionsSupported: ["posts", "books", "notes"],

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/status/route.ts:116:67 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    114 │         overallCoveragePercentage:
    115 │           totalPublished > 0
  > 116 │             ? Math.round((totalWithEmbeddings / totalPublished) * 100)
        │                                                                   ^^^
    117 │             : 0,
    118 │         itemsNeedingEmbeddings: totalPublished - totalWithEmbeddings,

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/status/route.ts:128:76 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    126 │               allPosts.totalDocs > 0
    127 │                 ? Math.round(
  > 128 │                     (postsWithEmbeddings.totalDocs / allPosts.totalDocs) * 100
        │                                                                            ^^^
    129 │                   )
    130 │                 : 0,

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/status/route.ts:140:76 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    138 │               allBooks.totalDocs > 0
    139 │                 ? Math.round(
  > 140 │                     (booksWithEmbeddings.totalDocs / allBooks.totalDocs) * 100
        │                                                                            ^^^
    141 │                   )
    142 │                 : 0,

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/status/route.ts:152:76 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    150 │               allNotes.totalDocs > 0
    151 │                 ? Math.round(
  > 152 │                     (notesWithEmbeddings.totalDocs / allNotes.totalDocs) * 100
        │                                                                            ^^^
    153 │                   )
    154 │                 : 0,

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/status/route.ts:185:38 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    183 │             ? Math.round(
    184 │                 sampleEmbeddings.docs.reduce(
  > 185 │                   (sum: number, doc: any) =>
        │                                      ^^^
    186 │                     sum + (doc.embedding_dimensions || 0),
    187 │                   0

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/embeddings/status/route.ts:226:55 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    224 │     }
    225 │
  > 226 │     if (status.statistics.overallCoveragePercentage < 100) {
        │                                                       ^^^
    227 │       status.recommendations.push({
    228 │         type: "info",

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/status/route.ts:235:57 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    233 │     }
    234 │
  > 235 │     if (status.statistics.overallCoveragePercentage === 100) {
        │                                                         ^^^
    236 │       status.recommendations.push({
    237 │         type: "success",

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/embeddings/status/route.ts:244:5 lint/complexity/noForEach ━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

    243 │     // Collection-specific recommendations
  > 244 │     Object.entries(status.statistics.collections).forEach(
        │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 245 │       ([collection, stats]: [string, any]) => {
         ...
  > 253 │       }
  > 254 │     );
        │     ^
    255 │
    256 │     return new Response(JSON.stringify(status, null, 2), {

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/app/api/embeddings/status/route.ts:245:38 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    243 │     // Collection-specific recommendations
    244 │     Object.entries(status.statistics.collections).forEach(
  > 245 │       ([collection, stats]: [string, any]) => {
        │                                      ^^^
    246 │         if (stats.totalPublished > 0 && stats.withEmbeddings === 0) {
    247 │           status.recommendations.push({

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/api/webhooks/resend.ts:32:18 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    30 │       }
    31 │
  > 32 │       res.status(200).json({ message: "Webhook processed successfully" });
       │                  ^^^
    33 │     } else {
    34 │       res.setHeader("Allow", ["POST"]);

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/webhooks/resend.ts:38:16 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    36 │     }
    37 │   } catch (_error) {
  > 38 │     res.status(500).json({ error: "Internal Server Error" });
       │                ^^^
    39 │   }
    40 │ }

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/webhooks/resend.ts:35:18 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    33 │     } else {
    34 │       res.setHeader("Allow", ["POST"]);
  > 35 │       res.status(405).end(`Method ${req.method} Not Allowed`);
       │                  ^^^
    36 │     }
    37 │   } catch (_error) {

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/webhooks/resend.ts:16:27 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    15 │       if (!(event && data && data.email)) {
  > 16 │         return res.status(400).json({ error: "Invalid payload" });
       │                           ^^^
    17 │       }
    18 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/api/webhooks/resend.ts:29:29 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    27 │           break;
    28 │         default:
  > 29 │           return res.status(400).json({ error: "Unhandled event type" });
       │                             ^^^
    30 │       }
    31 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/atom.xml/route.ts:67:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

     66 │     // Add posts to feed (same logic as RSS)
   > 67 │     posts.docs
        │     ^^^^^^^^^^
   > 68 │       .filter((post) => {
         ...
  > 112 │         });
  > 113 │       });
        │       ^^
    114 │
    115 │     return new Response(feed.atom1(), {

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/app/feed.json/route.ts:67:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

     66 │     // Add posts to feed (same logic as RSS)
   > 67 │     posts.docs
        │     ^^^^^^^^^^
   > 68 │       .filter((post) => {
         ...
  > 146 │         feed.addItem(feedItem);
  > 147 │       });
        │       ^^
    148 │
    149 │     return new Response(feed.json1(), {

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/app/feed.json/route.ts:80:46 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    78 │         const title = post.title;
    79 │         const description = post.description || "";
  > 80 │         const projectSlug = (post.project as any)?.slug || "";
       │                                              ^^^
    81 │         const link = `${SITE_URL}/${projectSlug}/${post.slug}`;
    82 │         const author = post.populatedAuthors?.[0]?.name || "Lyovson Team";

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/feed.json/route.ts:116:11 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

    114 │         // Add topics as additional categories for AI understanding
    115 │         if (post.topics && Array.isArray(post.topics)) {
  > 116 │           post.topics.forEach((topic: any) => {
        │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 117 │             const topicName =
         ...
  > 124 │             }
  > 125 │           });
        │           ^^
    126 │         }
    127 │

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/app/feed.json/route.ts:116:39 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    114 │         // Add topics as additional categories for AI understanding
    115 │         if (post.topics && Array.isArray(post.topics)) {
  > 116 │           post.topics.forEach((topic: any) => {
        │                                       ^^^
    117 │             const topicName =
    118 │               typeof topic === "object" ? topic.name || topic.slug : topic;

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/feed.json/route.ts:134:57 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    132 │             : undefined,
    133 │           readingTime: fullContent
  > 134 │             ? Math.ceil(fullContent.split(" ").length / 200)
        │                                                         ^^^
    135 │             : undefined,
    136 │           contentType: "article",

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/app/feed.json/route.ts:191:43 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    189 │ }
    190 │
  > 191 │ function _extractTextFromContent(content: any): string {
        │                                           ^^^
    192 │   if (!content) {
    193 │     return "";

  ℹ any disables many type checking rules. Its use should be avoided.


src/app/feed.xml/route.ts:68:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

     67 │     // Add posts to feed
   > 68 │     posts.docs
        │     ^^^^^^^^^^
   > 69 │       .filter((post) => {
         ...
  > 121 │         });
  > 122 │       });
        │       ^^
    123 │
    124 │     return new Response(feed.rss2(), {

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/app/robots.ts:7:16 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

     5 │ } from "next/cache";
     6 │
   > 7 │ export default async function robots(): Promise<MetadataRoute.Robots> {
       │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 8 │   "use cache";
        ...
  > 77 │     host: SITE_URL,
  > 78 │   };
  > 79 │ }
       │ ^
    80 │

  ℹ Remove this async modifier, or add an await expression in the function.

     5 │ } from "next/cache";
     6 │
   > 7 │ export default async function robots(): Promise<MetadataRoute.Robots> {
       │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 8 │   "use cache";
        ...
  > 77 │     host: SITE_URL,
  > 78 │   };
  > 79 │ }
       │ ^
    80 │

  ℹ Async functions without await expressions may not need to be declared async.


src/app/sitemap.ts:116:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

    115 │   // Add posts with enhanced metadata
  > 116 │   posts
        │   ^^^^^
  > 117 │     .filter((post): post is Post & { project: Project } =>
         ...
  > 131 │       });
  > 132 │     });
        │     ^^
    133 │
    134 │   // Add projects with better change frequency

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/app/sitemap.ts:135:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

    134 │   // Add projects with better change frequency
  > 135 │   projects
        │   ^^^^^^^^
  > 136 │     .filter((project): project is Project => Boolean(project?.slug))
         ...
  > 143 │       });
  > 144 │     });
        │     ^^
    145 │
    146 │   // Add topics with appropriate priority

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/app/sitemap.ts:147:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

    146 │   // Add topics with appropriate priority
  > 147 │   topics
        │   ^^^^^^
  > 148 │     .filter((topic): topic is Topic => Boolean(topic?.slug))
         ...
  > 155 │       });
  > 156 │     });
        │     ^^
    157 │
    158 │   return routes;

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/blocks/Code/CopyButton.tsx:15:10 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    13 │       setTimeout(() => {
    14 │         setText(() => "Copy");
  > 15 │       }, 1000);
       │          ^^^^
    16 │     }
    17 │   }

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/blocks/GIF/config.ts:52:25 lint/correctness/noUnusedFunctionParameters ━━━━━━━━━━

  ⚠ This parameter is unused.

    50 │           hooks: {
    51 │             beforeValidate: [
  > 52 │               ({ value, data }) => {
       │                         ^^^^
    53 │                 if (!value) {
    54 │                   return value;

  ℹ Unused parameters might be the result of an incomplete refactoring.


src/blocks/GIF/config.ts:83:21 lint/correctness/noUnusedFunctionParameters ━━━━━━━━━━

  ⚠ This parameter is unused.

    81 │       hooks: {
    82 │         beforeChange: [
  > 83 │           ({ value, originalDoc, data }) => {
       │                     ^^^^^^^^^^^
    84 │             if (!value?.raw) {
    85 │               return value;

  ℹ Unused parameters might be the result of an incomplete refactoring.


src/blocks/GIF/config.ts:83:34 lint/correctness/noUnusedFunctionParameters ━━━━━━━━━━

  ⚠ This parameter is unused.

    81 │       hooks: {
    82 │         beforeChange: [
  > 83 │           ({ value, originalDoc, data }) => {
       │                                  ^^^^
    84 │             if (!value?.raw) {
    85 │               return value;

  ℹ Unused parameters might be the result of an incomplete refactoring.


src/blocks/GIF/types.ts:8:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

     6 │   caption?: {
     7 │     root: {
   > 8 │       children: any[];
       │                 ^^^
     9 │       direction: null | "ltr" | "rtl";
    10 │       format: string;

  ℹ any disables many type checking rules. Its use should be avoided.


src/blocks/MediaBlock/Component.tsx:23:7 lint/suspicious/noEvolvingTypes ━━━━━━━━━━━

  ⚠ The type of this variable may evolve implicitly to any type, including the any type.

    21 │     props;
    22 │
  > 23 │   let caption;
       │       ^^^^^^^
    24 │   if (media && typeof media === "object") {
    25 │     caption = media.caption;

  ℹ Add an explicit type or initialization to avoid implicit type evolution.


src/blocks/MediaBlock/Component.tsx:23:7 lint/suspicious/noImplicitAnyLet ━━━━━━━━━━

  ⚠ This variable implicitly has the any type.

    21 │     props;
    22 │
  > 23 │   let caption;
       │       ^^^^^^^
    24 │   if (media && typeof media === "object") {
    25 │     caption = media.caption;

  ℹ Variable declarations without type annotation and initialization implicitly have the any type. Declare a type or initialize the variable with some value.


src/blocks/RenderBlocks.tsx:37:45 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    35 │               <div className="my-16" key={key}>
    36 │                 {blockType === "mediaBlock" && (
  > 37 │                   <MediaBlock {...(block as any)} />
       │                                             ^^^
    38 │                 )}
    39 │                 {blockType === "youtube" && (

  ℹ any disables many type checking rules. Its use should be avoided.


src/blocks/RenderBlocks.tsx:40:47 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    38 │                 )}
    39 │                 {blockType === "youtube" && (
  > 40 │                   <YouTubeBlock {...(block as any)} />
       │                                               ^^^
    41 │                 )}
    42 │                 {blockType === "gif" && <GIFBlock {...(block as any)} />}

  ℹ any disables many type checking rules. Its use should be avoided.


src/blocks/RenderBlocks.tsx:42:65 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    40 │                   <YouTubeBlock {...(block as any)} />
    41 │                 )}
  > 42 │                 {blockType === "gif" && <GIFBlock {...(block as any)} />}
       │                                                                 ^^^
    43 │               </div>
    44 │             );

  ℹ any disables many type checking rules. Its use should be avoided.


src/blocks/RenderBlocks.tsx:22:21 lint/nursery/noUnnecessaryConditions ━━━━━━━━━━━━━

  ⚠ This condition is always truthy based on the type.

    20 │   const { blocks } = props;
    21 │
  > 22 │   const hasBlocks = blocks && Array.isArray(blocks) && blocks.length > 0;
       │                     ^^^^^^
    23 │
    24 │   if (hasBlocks) {

  ℹ The type being checked can never be falsy, making this condition redundant.

  ℹ Remove the condition.


src/blocks/YouTube/Component.tsx:53:33 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━

  ⚠ Forbidden non-null assertion.

    51 │           className={cn(
    52 │             "glass-media relative w-full overflow-hidden rounded-lg shadow-lg transition-all duration-300",
  > 53 │             getAspectRatioClass(aspectRatio!)
       │                                 ^^^^^^^^^^^^
    54 │           )}
    55 │         >


src/blocks/YouTube/Component.tsx:65:13 lint/a11y/useButtonType ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Provide an explicit type prop for the button element.

    63 │             />
    64 │           ) : (
  > 65 │             <button
       │             ^^^^^^^
  > 66 │               aria-label="Play video"
  > 67 │               className="group relative block h-full w-full focus:outline-none focus-visible:ring-2 focus-visible:ring-glass-border-hover focus-visible:ring-offset-2"
  > 68 │               onClick={() => setIsLoaded(true)}
  > 69 │             >
       │             ^
    70 │               {/* Glass overlay that appears on hover */}
    71 │               <div className="glass-bg absolute inset-0 z-10 opacity-0 transition-all duration-300 group-hover:opacity-30" />

  ℹ The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.

  ℹ Allowed button types are: submit, button or reset


src/collections/Books/index.ts:164:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    162 │   hooks: {
    163 │     afterChange: [
  > 164 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 165 │         req.payload.logger.info(`Revalidating book: ${doc.slug}`);
  > 166 │         // TODO: Add revalidation logic for books when we have book pages
  > 167 │       },
        │       ^
    168 │     ],
    169 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    162 │   hooks: {
    163 │     afterChange: [
  > 164 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 165 │         req.payload.logger.info(`Revalidating book: ${doc.slug}`);
  > 166 │         // TODO: Add revalidation logic for books when we have book pages
  > 167 │       },
        │       ^
    168 │     ],
    169 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Movies/index.ts:145:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    143 │   hooks: {
    144 │     afterChange: [
  > 145 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 146 │         req.payload.logger.info(`Revalidating movie: ${doc.slug}`);
  > 147 │         // TODO: Add revalidation logic for movies when we have movie pages
  > 148 │       },
        │       ^
    149 │     ],
    150 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    143 │   hooks: {
    144 │     afterChange: [
  > 145 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 146 │         req.payload.logger.info(`Revalidating movie: ${doc.slug}`);
  > 147 │         // TODO: Add revalidation logic for movies when we have movie pages
  > 148 │       },
        │       ^
    149 │     ],
    150 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Music/index.ts:163:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    161 │   hooks: {
    162 │     afterChange: [
  > 163 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 164 │         req.payload.logger.info(`Revalidating music: ${doc.slug}`);
  > 165 │         // TODO: Add revalidation logic for music when we have music pages
  > 166 │       },
        │       ^
    167 │     ],
    168 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    161 │   hooks: {
    162 │     afterChange: [
  > 163 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 164 │         req.payload.logger.info(`Revalidating music: ${doc.slug}`);
  > 165 │         // TODO: Add revalidation logic for music when we have music pages
  > 166 │       },
        │       ^
    167 │     ],
    168 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Notes/hooks/generateEmbedding.ts:7:33 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    6 │ // Notes-specific text extraction
  > 7 │ function extractNotesText(data: any): string {
      │                                 ^^^
    8 │   const parts: string[] = [];
    9 │

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Notes/index.ts:278:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    276 │     beforeChange: [generateEmbeddingHook],
    277 │     afterChange: [
  > 278 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 279 │         req.payload.logger.info(`Revalidating note: ${doc.slug}`);
  > 280 │         // TODO: Add revalidation logic for notes when we have note pages
  > 281 │       },
        │       ^
    282 │     ],
    283 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    276 │     beforeChange: [generateEmbeddingHook],
    277 │     afterChange: [
  > 278 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 279 │         req.payload.logger.info(`Revalidating note: ${doc.slug}`);
  > 280 │         // TODO: Add revalidation logic for notes when we have note pages
  > 281 │       },
        │       ^
    282 │     ],
    283 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Podcasts/index.ts:216:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    214 │   hooks: {
    215 │     afterChange: [
  > 216 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 217 │         req.payload.logger.info(`Revalidating podcast: ${doc.slug}`);
  > 218 │         // TODO: Add revalidation logic for podcasts when we have podcast pages
  > 219 │       },
        │       ^
    220 │     ],
    221 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    214 │   hooks: {
    215 │     afterChange: [
  > 216 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 217 │         req.payload.logger.info(`Revalidating podcast: ${doc.slug}`);
  > 218 │         // TODO: Add revalidation logic for podcasts when we have podcast pages
  > 219 │       },
        │       ^
    220 │     ],
    221 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Posts/hooks/generateEmbedding.ts:7:33 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    6 │ // Posts-specific text extraction
  > 7 │ function extractPostsText(data: any): string {
      │                                 ^^^
    8 │   const parts: string[] = [];
    9 │

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:103:24 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    101 │       const authorUsernames = await getAuthorUsernames(
    102 │         req,
  > 103 │         doc.authors as any,
        │                        ^^^
    104 │         (doc as any).populatedAuthors
    105 │       );

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:10:16 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 31 detected (max: 15).

     9 │ // Helper: resolve author usernames from the post document
  > 10 │ async function getAuthorUsernames(
       │                ^^^^^^^^^^^^^^^^^^
    11 │   req: any,
    12 │   authors: Post["authors"] | undefined,

  ℹ Please refactor this function to reduce its complexity score from 31 to the max allowed complexity 15.


src/collections/Posts/hooks/revalidatePost.ts:11:8 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

     9 │ // Helper: resolve author usernames from the post document
    10 │ async function getAuthorUsernames(
  > 11 │   req: any,
       │        ^^^
    12 │   authors: Post["authors"] | undefined,
    13 │   populatedAuthors?: { username?: string | null }[] | null

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:33:22 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    31 │         typeof a === "object" &&
    32 │         "username" in a &&
  > 33 │         typeof (a as any).username === "string"
       │                      ^^^
    34 │       ) {
    35 │         const u = (a as any).username as string;

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:35:25 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    33 │         typeof (a as any).username === "string"
    34 │       ) {
  > 35 │         const u = (a as any).username as string;
       │                         ^^^
    36 │         if (u?.trim()) {
    37 │           usernames.add(u.trim());

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:43:22 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    41 │           const user = await req.payload.findByID({
    42 │             collection: "users",
  > 43 │             id: a as any,
       │                      ^^^
    44 │           });
    45 │           const u = user?.username;

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:63:4 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 29 detected (max: 15).

    61 │   previousDoc,
    62 │   req,
  > 63 │ }) => {
       │    ^^^
    64 │   const { payload } = req;
    65 │

  ℹ Please refactor this function to reduce its complexity score from 29 to the max allowed complexity 15.


src/collections/Posts/hooks/revalidatePost.ts:104:17 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    102 │         req,
    103 │         doc.authors as any,
  > 104 │         (doc as any).populatedAuthors
        │                 ^^^
    105 │       );
    106 │       if (authorUsernames.length) {

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:152:32 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    150 │       const prevAuthorUsernames = await getAuthorUsernames(
    151 │         req,
  > 152 │         previousDoc.authors as any,
        │                                ^^^
    153 │         (previousDoc as any).populatedAuthors
    154 │       );

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:153:25 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    151 │         req,
    152 │         previousDoc.authors as any,
  > 153 │         (previousDoc as any).populatedAuthors
        │                         ^^^
    154 │       );
    155 │       if (prevAuthorUsernames.length) {

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:205:14 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    203 │   try {
    204 │     const authorUsernames = await getAuthorUsernames(
  > 205 │       req as any,
        │              ^^^
    206 │       doc?.authors as any,
    207 │       (doc as any)?.populatedAuthors

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:206:23 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    204 │     const authorUsernames = await getAuthorUsernames(
    205 │       req as any,
  > 206 │       doc?.authors as any,
        │                       ^^^
    207 │       (doc as any)?.populatedAuthors
    208 │     );

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Posts/hooks/revalidatePost.ts:207:15 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    205 │       req as any,
    206 │       doc?.authors as any,
  > 207 │       (doc as any)?.populatedAuthors
        │               ^^^
    208 │     );
    209 │     if (authorUsernames.length) {

  ℹ any disables many type checking rules. Its use should be avoided.


src/collections/Projects/index.ts:70:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    68 │     ],
    69 │     afterDelete: [
  > 70 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 71 │         req.payload.logger.info(
        ...
  > 80 │         revalidateTag("playground"); // Playground uses project data
  > 81 │       },
       │       ^
    82 │     ],
    83 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    68 │     ],
    69 │     afterDelete: [
  > 70 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 71 │         req.payload.logger.info(
        ...
  > 80 │         revalidateTag("playground"); // Playground uses project data
  > 81 │       },
       │       ^
    82 │     ],
    83 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Projects/index.ts:58:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    56 │   hooks: {
    57 │     afterChange: [
  > 58 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 59 │         req.payload.logger.info(`Revalidating project: ${doc.slug}`);
        ...
  > 66 │         revalidateTag("playground"); // Playground uses project data
  > 67 │       },
       │       ^
    68 │     ],
    69 │     afterDelete: [

  ℹ Remove this async modifier, or add an await expression in the function.

    56 │   hooks: {
    57 │     afterChange: [
  > 58 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 59 │         req.payload.logger.info(`Revalidating project: ${doc.slug}`);
        ...
  > 66 │         revalidateTag("playground"); // Playground uses project data
  > 67 │       },
       │       ^
    68 │     ],
    69 │     afterDelete: [

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Topics/index.ts:57:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    55 │     ],
    56 │     afterChange: [
  > 57 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 58 │         req.payload.logger.info(`Revalidating topic: ${doc.slug}`);
        ...
  > 64 │         revalidateTag("sitemap");
  > 65 │       },
       │       ^
    66 │     ],
    67 │     afterDelete: [

  ℹ Remove this async modifier, or add an await expression in the function.

    55 │     ],
    56 │     afterChange: [
  > 57 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 58 │         req.payload.logger.info(`Revalidating topic: ${doc.slug}`);
        ...
  > 64 │         revalidateTag("sitemap");
  > 65 │       },
       │       ^
    66 │     ],
    67 │     afterDelete: [

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Topics/index.ts:68:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    66 │     ],
    67 │     afterDelete: [
  > 68 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 69 │         req.payload.logger.info(
        ...
  > 77 │         revalidateTag("sitemap");
  > 78 │       },
       │       ^
    79 │     ],
    80 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    66 │     ],
    67 │     afterDelete: [
  > 68 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 69 │         req.payload.logger.info(
        ...
  > 77 │         revalidateTag("sitemap");
  > 78 │       },
       │       ^
    79 │     ],
    80 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/TvShows/index.ts:165:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    163 │   hooks: {
    164 │     afterChange: [
  > 165 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 166 │         req.payload.logger.info(`Revalidating TV show: ${doc.slug}`);
  > 167 │         // TODO: Add revalidation logic for TV shows when we have show pages
  > 168 │       },
        │       ^
    169 │     ],
    170 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    163 │   hooks: {
    164 │     afterChange: [
  > 165 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 166 │         req.payload.logger.info(`Revalidating TV show: ${doc.slug}`);
  > 167 │         // TODO: Add revalidation logic for TV shows when we have show pages
  > 168 │       },
        │       ^
    169 │     ],
    170 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Users/index.ts:39:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    37 │   hooks: {
    38 │     afterChange: [
  > 39 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 40 │         if (doc.username) {
        ...
  > 47 │         }
  > 48 │       },
       │       ^
    49 │     ],
    50 │     afterDelete: [

  ℹ Remove this async modifier, or add an await expression in the function.

    37 │   hooks: {
    38 │     afterChange: [
  > 39 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 40 │         if (doc.username) {
        ...
  > 47 │         }
  > 48 │       },
       │       ^
    49 │     ],
    50 │     afterDelete: [

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/Users/index.ts:51:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    49 │     ],
    50 │     afterDelete: [
  > 51 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 52 │         if (doc?.username) {
        ...
  > 61 │         }
  > 62 │       },
       │       ^
    63 │     ],
    64 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    49 │     ],
    50 │     afterDelete: [
  > 51 │       async ({ doc, req }) => {
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 52 │         if (doc?.username) {
        ...
  > 61 │         }
  > 62 │       },
       │       ^
    63 │     ],
    64 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/collections/VideoGames/index.ts:180:7 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    178 │   hooks: {
    179 │     afterChange: [
  > 180 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 181 │         req.payload.logger.info(`Revalidating video game: ${doc.slug}`);
  > 182 │         // TODO: Add revalidation logic for video games when we have game pages
  > 183 │       },
        │       ^
    184 │     ],
    185 │   },

  ℹ Remove this async modifier, or add an await expression in the function.

    178 │   hooks: {
    179 │     afterChange: [
  > 180 │       async ({ doc, req }) => {
        │       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 181 │         req.payload.logger.info(`Revalidating video game: ${doc.slug}`);
  > 182 │         // TODO: Add revalidation logic for video games when we have game pages
  > 183 │       },
        │       ^
    184 │     ],
    185 │   },

  ℹ Async functions without await expressions may not need to be declared async.


src/components/Media/ImageMedia/index.tsx:40:13 lint/style/noNonNullAssertion ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.

    38 │     } = resource;
    39 │
  > 40 │     width = fullWidth!;
       │             ^^^^^^^^^^
    41 │     height = fullHeight!;
    42 │     alt = altFromResource || "";


src/components/Media/ImageMedia/index.tsx:41:14 lint/style/noNonNullAssertion ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.

    40 │     width = fullWidth!;
  > 41 │     height = fullHeight!;
       │              ^^^^^^^^^^^
    42 │     alt = altFromResource || "";
    43 │


src/components/Media/ImageMedia/index.tsx:51:7 lint/style/noNestedTernary ━━━━━━━━━━

  ⚠ Do not nest ternary expressions.

    49 │   const sizes = sizeFromProps
    50 │     ? sizeFromProps
  > 51 │     : fill
       │       ^^^^
  > 52 │       ? "100vw"
  > 53 │       : "(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 40vw, 400px";
       │       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    54 │
    55 │   return (

  ℹ Nesting ternary expressions can make code more difficult to understand.

  ℹ Convert nested ternary expression into if-else statements or separate the conditions to make the logic easier to understand.


src/components/Media/index.tsx:13:31 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    11 │   const isVideo =
    12 │     typeof resource === "object" && resource?.mimeType?.includes("video");
  > 13 │   const Tag = (htmlElement as any) || Fragment;
       │                               ^^^
    14 │
    15 │   return (

  ℹ any disables many type checking rules. Its use should be avoided.


src/components/PayloadRedirects/index.tsx:22:40 lint/nursery/noShadow ━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    20 │   const redirects = await getCachedRedirects()();
    21 │
  > 22 │   const redirectItem = redirects.find((redirect) => redirect.from === slug);
       │                                        ^^^^^^^^
    23 │
    24 │   if (redirectItem) {

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

  > 1 │ import { notFound, redirect } from "next/navigation";
      │                    ^^^^^^^^
    2 │ import type React from "react";
    3 │

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/RichText/index.tsx:7:27 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    5 │ type Props = {
    6 │   className?: string;
  > 7 │   content: Record<string, any>;
      │                           ^^^
    8 │   enableGutter?: boolean;
    9 │   enableProse?: boolean;

  ℹ any disables many type checking rules. Its use should be avoided.


src/components/RichText/serialize.tsx:74:48 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    72 │           if (node.format & IS_UNDERLINE) {
    73 │             text = (
  > 74 │               <span className="underline" key={index}>
       │                                                ^^^^^
    75 │                 {text}
    76 │               </span>

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:51:8 suppressions/unused ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Suppression comment has no effect. Remove the suppression or make sure you are suppressing the correct rule.

    49 │   return (
    50 │     <>
  > 51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
       │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    52 │       {nodes?.map((node, index): JSX.Element | null => {
    53 │         if (node == null) {


src/components/RichText/serialize.tsx:52:53 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 56 detected (max: 15).

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                                                     ^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ Please refactor this function to reduce its complexity score from 56 to the max allowed complexity 15.


src/components/RichText/serialize.tsx:102:76 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 17 detected (max: 15).

    100 │         // https://github.com/facebook/lexical/blob/d10c4e6e55261b2fdd7d1845aed46151d0f06a8c/packages/lexical-list/src/LexicalListItemNode.ts#L133
    101 │         // which does not return checked: false (only true - i.e. there is no prop for false)
  > 102 │         const serializedChildrenFn = (node: NodeTypes): JSX.Element | null => {
        │                                                                            ^^^
    103 │           if (node.children == null) {
    104 │             return null;

  ℹ Please refactor this function to reduce its complexity score from 17 to the max allowed complexity 15.


src/components/RichText/serialize.tsx:230:17 lint/a11y/useAriaPropsSupportedByRole ━━━━━━━━━━

  ⚠ The ARIA attribute 'aria-checked' is not supported by this element.

    228 │             if (node?.checked != null) {
    229 │               return (
  > 230 │                 <li
        │                 ^^^
  > 231 │                   aria-checked={node.checked ? "true" : "false"}
         ...
  > 235 │                   value={node?.value}
  > 236 │                 >
        │                 ^
    237 │                   <span className="mr-2">{node.checked ? "✅" : "☐"}</span>
    238 │                   {serializedChildren}

  ℹ Ensure that ARIA attributes are valid for the role of the element.


src/components/RichText/serialize.tsx:263:42 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    261 │                 key={index}
    262 │                 newTab={Boolean(fields?.newTab)}
  > 263 │                 reference={fields.doc as any}
        │                                          ^^^
    264 │                 type={fields.linkType === "internal" ? "reference" : "custom"}
    265 │                 url={fields.url}

  ℹ any disables many type checking rules. Its use should be avoided.


src/components/RichText/serialize.tsx:102:39 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    100 │         // https://github.com/facebook/lexical/blob/d10c4e6e55261b2fdd7d1845aed46151d0f06a8c/packages/lexical-list/src/LexicalListItemNode.ts#L133
    101 │         // which does not return checked: false (only true - i.e. there is no prop for false)
  > 102 │         const serializedChildrenFn = (node: NodeTypes): JSX.Element | null => {
        │                                       ^^^^
    103 │           if (node.children == null) {
    104 │             return null;

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                    ^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/RichText/serialize.tsx:58:43 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    57 │         if (node.type === "text") {
  > 58 │           let text = <React.Fragment key={index}>{node.text}</React.Fragment>;
       │                                           ^^^^^
    59 │           if (node.format & IS_BOLD) {
    60 │             text = <strong key={index}>{text}</strong>;

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:60:33 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    58 │           let text = <React.Fragment key={index}>{node.text}</React.Fragment>;
    59 │           if (node.format & IS_BOLD) {
  > 60 │             text = <strong key={index}>{text}</strong>;
       │                                 ^^^^^
    61 │           }
    62 │           if (node.format & IS_ITALIC) {

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:63:29 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    61 │           }
    62 │           if (node.format & IS_ITALIC) {
  > 63 │             text = <em key={index}>{text}</em>;
       │                             ^^^^^
    64 │           }
    65 │           if (node.format & IS_STRIKETHROUGH) {

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:67:51 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    65 │           if (node.format & IS_STRIKETHROUGH) {
    66 │             text = (
  > 67 │               <span className="line-through" key={index}>
       │                                                   ^^^^^
    68 │                 {text}
    69 │               </span>

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:83:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    81 │               <code
    82 │                 className="rounded bg-muted px-1 py-0.5 font-mono text-sm"
  > 83 │                 key={index}
       │                      ^^^^^
    84 │               >
    85 │                 {node.text}

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:93:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    91 │           }
    92 │           if (node.format & IS_SUPERSCRIPT) {
  > 93 │             text = <sup key={index}>{text}</sup>;
       │                              ^^^^^
    94 │           }
    95 │

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:133:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    131 │                 <div
    132 │                   className="glass-stagger-1 col-span-3 col-start-1"
  > 133 │                   key={index}
        │                        ^^^^^
    134 │                 >
    135 │                   <MediaBlock

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:147:72 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    145 │             case "banner":
    146 │               return (
  > 147 │                 <div className="glass-stagger-2 col-start-2 mb-6" key={index}>
        │                                                                        ^^^^^
    148 │                   <BannerBlock
    149 │                     className="glass-section glass-interactive"

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:156:67 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    154 │             case "code":
    155 │               return (
  > 156 │                 <div className="glass-stagger-2 col-start-2" key={index}>
        │                                                                   ^^^^^
    157 │                   <CodeBlock className="glass-section font-mono" {...block} />
    158 │                 </div>

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:164:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    162 │                 <div
    163 │                   className="glass-stagger-1 glass-section col-span-3 col-start-1 overflow-hidden rounded-lg"
  > 164 │                   key={index}
        │                        ^^^^^
    165 │                 >
    166 │                   <YouTubeBlock {...block} />

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:173:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    171 │                 <div
    172 │                   className="glass-stagger-2 glass-section glass-interactive col-start-2"
  > 173 │                   key={index}
        │                        ^^^^^
    174 │                 >
    175 │                   <XPostBlock {...block} />

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:180:67 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    178 │             case "quote":
    179 │               return (
  > 180 │                 <div className="glass-stagger-2 col-start-2" key={index}>
        │                                                                   ^^^^^
    181 │                   <QuoteBlock
    182 │                     className="glass-section glass-premium"

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:191:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    189 │                 <div
    190 │                   className="glass-stagger-1 glass-section col-span-3 col-start-1 overflow-hidden rounded-lg"
  > 191 │                   key={index}
        │                        ^^^^^
    192 │                 >
    193 │                   <GIFBlock {...block} />

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:202:53 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    200 │         switch (node.type) {
    201 │           case "linebreak": {
  > 202 │             return <br className="col-start-2" key={index} />;
        │                                                     ^^^^^
    203 │           }
    204 │           case "paragraph": {

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:206:47 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    204 │           case "paragraph": {
    205 │             return (
  > 206 │               <p className="col-start-2" key={index}>
        │                                               ^^^^^
    207 │                 {serializedChildren}
    208 │               </p>

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:214:49 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    212 │             const Tag = node?.tag;
    213 │             return (
  > 214 │               <Tag className="col-start-2" key={index}>
        │                                                 ^^^^^
    215 │                 {serializedChildren}
    216 │               </Tag>

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:222:49 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    220 │             const Tag = node?.tag;
    221 │             return (
  > 222 │               <Tag className="col-start-2" key={index}>
        │                                                 ^^^^^
    223 │                 {serializedChildren}
    224 │               </Tag>

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:233:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    231 │                   aria-checked={node.checked ? "true" : "false"}
    232 │                   className={`${node.checked ? "line-through opacity-60" : ""}`}
  > 233 │                   key={index}
        │                        ^^^^^
    234 │                   tabIndex={-1}
    235 │                   value={node?.value}

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:243:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    241 │             }
    242 │             return (
  > 243 │               <li key={index} value={node?.value}>
        │                        ^^^^^
    244 │                 {serializedChildren}
    245 │               </li>

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:250:56 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    248 │           case "quote": {
    249 │             return (
  > 250 │               <blockquote className="col-start-2" key={index}>
        │                                                        ^^^^^
    251 │                 {serializedChildren}
    252 │               </blockquote>

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:261:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    259 │               <CMSLink
    260 │                 className="underline transition-colors duration-300 hover:no-underline"
  > 261 │                 key={index}
        │                      ^^^^^
    262 │                 newTab={Boolean(fields?.newTab)}
    263 │                 reference={fields.doc as any}

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/RichText/serialize.tsx:90:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    88 │           }
    89 │           if (node.format & IS_SUBSCRIPT) {
  > 90 │             text = <sub key={index}>{text}</sub>;
       │                              ^^^^^
    91 │           }
    92 │           if (node.format & IS_SUPERSCRIPT) {

  ℹ This is the source of the key value.

    50 │     <>
    51 │       {/* biome-ignore lint/suspicious/noArrayIndexKey: Lexical nodes are stable and ordered in the document tree */}
  > 52 │       {nodes?.map((node, index): JSX.Element | null => {
       │                          ^^^^^
    53 │         if (node == null) {
    54 │           return null;

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/grid/card/hero/index.tsx:7:29 lint/suspicious/useAwait ━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

     5 │ import { GridCardSection } from "../section";
     6 │
   > 7 │ export const GridCardHero = async ({
       │                             ^^^^^^^^
   > 8 │   className,
        ...
  > 49 │     </GridCard>
  > 50 │   );
  > 51 │ };
       │ ^
    52 │

  ℹ Remove this async modifier, or add an await expression in the function.

     5 │ import { GridCardSection } from "../section";
     6 │
   > 7 │ export const GridCardHero = async ({
       │                             ^^^^^^^^
   > 8 │   className,
        ...
  > 49 │     </GridCard>
  > 50 │   );
  > 51 │ };
       │ ^
    52 │

  ℹ Async functions without await expressions may not need to be declared async.


src/components/grid/card/index.tsx:19:7 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━

  ⚠ The elements with this role can be changed to the following elements:
    <article>

    17 │         className
    18 │       )}
  > 19 │       role="article"
       │       ^^^^^^^^^^^^^^
    20 │     >
    21 │       {children}

  ℹ For examples and more information, see WAI-ARIA Roles


src/components/grid/card/nav/index.tsx:32:1 lint/performance/noBarrelFile ━━━━━━━━━━

  ⚠ Avoid barrel files, they slow down performance, and cause large module graphs with modules that go unused.

    30 │ };
    31 │
  > 32 │ export { GridCardNavItem } from "./grid-card-nav-item";
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    33 │

  ℹ Check this thorough explanation to better understand the context.


src/components/grid/card/nav/site-title-section.tsx:19:11 lint/a11y/useSemanticElements ━━━━━━━━━━

  ⚠ The elements with this role can be changed to the following elements:
    <header>

    17 │           aria-label="Site title"
    18 │           className={"glass-text text-center font-bold text-3xl"}
  > 19 │           role="banner"
       │           ^^^^^^^^^^^^^
    20 │         >
    21 │           Lyóvson.com

  ℹ For examples and more information, see WAI-ARIA Roles


src/components/grid/card/post/grid-card-post-full.tsx:91:92 lint/style/noMagicNumbers ━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    89 │             <Link
    90 │               aria-label={`View posts about ${topic.name}`}
  > 91 │               className={`w-full font-semibold text-xs glass-stagger-${Math.min(index + 1, 6)}`}
       │                                                                                            ^
    92 │               href={{ pathname: `/topics/${topic.slug}` }}
    93 │               key={topic.id}

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/grid/card/post/grid-card-post-full.tsx:122:188 lint/style/noMagicNumbers ━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    120 │             <Link
    121 │               aria-label={`View ${author.name}'s profile`}
  > 122 │               className={`glass-text glass-interactive flex items-center gap-2 transition-colors duration-300 hover:text-[var(--glass-text-secondary)] glass-stagger-${Math.min(index + 1, 6)}`}
        │                                                                                                                                                                                            ^
    123 │               href={{ pathname: `/${author.username}` }}
    124 │               key={author.id}

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/grid/card/post/index.tsx:1:1 lint/performance/noBarrelFile ━━━━━━━━━━

  ⚠ Avoid barrel files, they slow down performance, and cause large module graphs with modules that go unused.

  > 1 │ export { GridCardPostFull } from "./grid-card-post-full";
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ export { GridCardPostSearch } from "./grid-card-post-search";
    3 │

  ℹ Check this thorough explanation to better understand the context.


src/components/grid/card/related/index.tsx:23:151 lint/style/noMagicNumbers ━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    21 │           <Link
    22 │             aria-label={`Read related post: ${post.title}`}
  > 23 │             className={`col-start-1 col-end-4 row-start-${index + 1} row-end-${index + 2} group glass-interactive glass-stagger-${Math.min(index + 1, 6)}`}
       │                                                                                                                                                       ^
    24 │             href={`/posts/${post.slug}`}
    25 │             key={post.id}

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/grid/card/section/index.tsx:21:5 lint/a11y/noNoninteractiveElementInteractions ━━━━━━━━━━

  ⚠ Non-interactive element should not have event handler.

    20 │   return (
  > 21 │     <section
       │     ^^^^^^^^
  > 22 │       className={cn(
        ...
  > 46 │       })}
  > 47 │     >
       │     ^
    48 │       {children}
    49 │     </section>

  ℹ Consider replace semantically interactive element like <button/> or <a href/>.


src/components/grid/card/section/index.tsx:21:5 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  ⚠ Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.

    20 │   return (
  > 21 │     <section
       │     ^^^^^^^^
  > 22 │       className={cn(
        ...
  > 46 │       })}
  > 47 │     >
       │     ^
    48 │       {children}
    49 │     </section>

  ℹ Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.


src/components/grid/card/section/index.tsx:21:5 lint/a11y/noStaticElementInteractions ━━━━━━━━━━

  ⚠ Static Elements should not be interactive.

    20 │   return (
  > 21 │     <section
       │     ^^^^^^^^
  > 22 │       className={cn(
        ...
  > 46 │       })}
  > 47 │     >
       │     ^
    48 │       {children}
    49 │     </section>

  ℹ To add interactivity such as a mouse or key event listener to a static element, give the element an appropriate role value.


src/components/grid/card/subscribe/subscribe-form.tsx:17:3 lint/correctness/noUnusedFunctionParameters ━━━━━━━━━━

  ⚠ This parameter is unused.

    15 │   buttonText,
    16 │   action,
  > 17 │   state,
       │   ^^^^^
    18 │   projectId,
    19 │ }: SubscribeFormProps) {

  ℹ Unused parameters might be the result of an incomplete refactoring.


src/components/grid/card/user-social/index.tsx:116:52 lint/style/noMagicNumbers ━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    114 │             className={cn(
    115 │               gridPositions[index],
  > 116 │               `glass-stagger-${Math.min(index + 1, 6)}`
        │                                                    ^
    117 │             )}
    118 │             key={link.name}

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/grid/card/user/index.tsx:1:1 lint/performance/noBarrelFile ━━━━━━━━━━

  ⚠ Avoid barrel files, they slow down performance, and cause large module graphs with modules that go unused.

  > 1 │ export { GridCardJess } from "./jess";
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ export { GridCardRafa } from "./rafa";
    3 │

  ℹ Check this thorough explanation to better understand the context.


src/components/grid/index.tsx:26:63 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    24 │         ? children.map((child, index) => (
    25 │             <div
  > 26 │               className={`glass-stagger-${Math.min(index + 1, 6)} contents`}
       │                                                               ^
    27 │               key={index}
    28 │             >

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/grid/index.tsx:37:1 lint/performance/noBarrelFile ━━━━━━━━━━━━━━━━━━━

  ⚠ Avoid barrel files, they slow down performance, and cause large module graphs with modules that go unused.

    35 │ };
    36 │
  > 37 │ export { GridCard } from "./card";
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    38 │ export { GridCardHero } from "./card/hero";
    39 │ export { GridCardNav, GridCardNavItem } from "./card/nav";

  ℹ Check this thorough explanation to better understand the context.


src/components/grid/index.tsx:27:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    25 │             <div
    26 │               className={`glass-stagger-${Math.min(index + 1, 6)} contents`}
  > 27 │               key={index}
       │                    ^^^^^
    28 │             >
    29 │               {child}

  ℹ This is the source of the key value.

    22 │       {/* Enhanced children with staggered animations */}
    23 │       {Array.isArray(children)
  > 24 │         ? children.map((child, index) => (
       │                                ^^^^^
    25 │             <div
    26 │               className={`glass-stagger-${Math.min(index + 1, 6)} contents`}

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/grid/skeleton/index.tsx:1:1 lint/performance/noBarrelFile ━━━━━━━━━━━

  ⚠ Avoid barrel files, they slow down performance, and cause large module graphs with modules that go unused.

  > 1 │ export { SkeletonCard } from "./skeleton-card";
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ export { SkeletonGrid } from "./skeleton-grid";
    3 │

  ℹ Check this thorough explanation to better understand the context.


src/components/grid/skeleton/skeleton-grid.tsx:11:28 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

     9 │     <>
    10 │       {new Array(count).fill(0).map((_, index) => (
  > 11 │         <SkeletonCard key={index} />
       │                            ^^^^^
    12 │       ))}
    13 │     </>

  ℹ This is the source of the key value.

     8 │   return (
     9 │     <>
  > 10 │       {new Array(count).fill(0).map((_, index) => (
       │                                         ^^^^^
    11 │         <SkeletonCard key={index} />
    12 │       ))}

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/pwa-install.tsx:38:52 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    36 │         "(display-mode: standalone)"
    37 │       ).matches;
  > 38 │       const isIOSStandalone = (window.navigator as any).standalone === true;
       │                                                    ^^^
    39 │       setIsInstalled(isStandalone || isIOSStandalone);
    40 │     };

  ℹ any disables many type checking rules. Its use should be avoided.


src/components/pwa-install.tsx:46:57 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    44 │       const userAgent = window.navigator.userAgent;
    45 │       const isIOSDevice =
  > 46 │         IOS_DEVICE_REGEX.test(userAgent) && !(window as any).MSStream;
       │                                                         ^^^
    47 │       setIsIOS(isIOSDevice);
    48 │     };

  ℹ any disables many type checking rules. Its use should be avoided.


src/components/pwa-install.tsx:140:13 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━━━━━━━━━

  ⚠ Alternative text title element cannot be empty

    138 │         <div className="flex items-start space-x-3">
    139 │           <div className="flex-shrink-0">
  > 140 │             <svg
        │             ^^^^
  > 141 │               className="h-5 w-5 text-blue-400"
  > 142 │               fill="currentColor"
  > 143 │               viewBox="0 0 20 20"
  > 144 │             >
        │             ^
    145 │               <path
    146 │                 clipRule="evenodd"

  ℹ For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.


src/components/pwa-install.tsx:179:15 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━━━━━━━━━

  ⚠ Alternative text title element cannot be empty

    177 │           <div className="flex items-start space-x-3">
    178 │             <div className="flex-shrink-0">
  > 179 │               <svg
        │               ^^^^
  > 180 │                 className="h-5 w-5 text-green-400"
  > 181 │                 fill="currentColor"
  > 182 │                 viewBox="0 0 20 20"
  > 183 │               >
        │               ^
    184 │                 <path
    185 │                   clipRule="evenodd"

  ℹ For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.


src/components/pwa-install.tsx:119:15 lint/correctness/noUnusedVariables ━━━━━━━━━━━

  ⚠ This variable outcome is unused.

    117 │     try {
    118 │       await deferredPrompt.prompt();
  > 119 │       const { outcome } = await deferredPrompt.userChoice;
        │               ^^^^^^^
    120 │
    121 │       // User choice handled - cleanup state regardless of outcome

  ℹ Unused variables are often the result of an incomplete refactoring, typos, or other sources of bugs.


src/components/ui/breadcrumb.tsx:59:7 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━

  ⚠ The elements with this role can be changed to the following elements:
    <a>
    <link>

    57 │       className={cn("font-normal text-foreground", className)}
    58 │       data-slot="breadcrumb-page"
  > 59 │       role="link"
       │       ^^^^^^^^^^^
    60 │       {...props}
    61 │     />

  ℹ For examples and more information, see WAI-ARIA Roles


src/components/ui/breadcrumb.tsx:54:5 lint/a11y/useFocusableInteractive ━━━━━━━━━━━━

  ⚠ The HTML element with the interactive role "link" is not focusable.

    52 │ function BreadcrumbPage({ className, ...props }: React.ComponentProps<"span">) {
    53 │   return (
  > 54 │     <span
       │     ^^^^^
  > 55 │       aria-current="page"
        ...
  > 60 │       {...props}
  > 61 │     />
       │     ^^
    62 │   );
    63 │ }

  ℹ A non-interactive HTML element that is not focusable may not be reachable for users that rely on keyboard navigation, even with an added role like "link".

  ℹ Add a tabIndex attribute to make this element focusable.


src/components/ui/calendar.tsx:8:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

     6 │   ChevronRightIcon,
     7 │ } from "lucide-react";
   > 8 │ import * as React from "react";
       │        ^^^^^^^^^^^^^^^^^^^^^^^
     9 │ import {
    10 │   type DayButton,

  ℹ Use named imports instead.


src/components/ui/calendar.tsx:125:9 lint/correctness/noNestedComponentDefinitions ━━━━━━━━━━

  ⚠ Components should not be defined inside other components.

    123 │       }}
    124 │       components={{
  > 125 │         Root: ({ className, rootRef, ...props }) => {
        │         ^^^^
    126 │           return (
    127 │             <div

  ℹ Move it outside of the parent component or pass it as a prop.

    15 │ import { cn } from "@/lib/utils";
    16 │
  > 17 │ function Calendar({
       │          ^^^^^^^^
    18 │   className,
    19 │   classNames,

  ℹ Component definitions inside other components cause them to be recreated on every render, which can lead to performance issues and unexpected behavior.


src/components/ui/calendar.tsx:135:9 lint/correctness/noNestedComponentDefinitions ━━━━━━━━━━

  ⚠ Components should not be defined inside other components.

    133 │           );
    134 │         },
  > 135 │         Chevron: ({ className, orientation, ...props }) => {
        │         ^^^^^^^
    136 │           if (orientation === "left") {
    137 │             return (

  ℹ Move it outside of the parent component or pass it as a prop.

    15 │ import { cn } from "@/lib/utils";
    16 │
  > 17 │ function Calendar({
       │          ^^^^^^^^
    18 │   className,
    19 │   classNames,

  ℹ Component definitions inside other components cause them to be recreated on every render, which can lead to performance issues and unexpected behavior.


src/components/ui/calendar.tsx:156:9 lint/correctness/noNestedComponentDefinitions ━━━━━━━━━━

  ⚠ Components should not be defined inside other components.

    154 │         },
    155 │         DayButton: CalendarDayButton,
  > 156 │         WeekNumber: ({ children, ...props }) => {
        │         ^^^^^^^^^^
    157 │           return (
    158 │             <td {...props}>

  ℹ Move it outside of the parent component or pass it as a prop.

    15 │ import { cn } from "@/lib/utils";
    16 │
  > 17 │ function Calendar({
       │          ^^^^^^^^
    18 │   className,
    19 │   classNames,

  ℹ Component definitions inside other components cause them to be recreated on every render, which can lead to performance issues and unexpected behavior.


src/components/ui/calendar.tsx:125:18 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    123 │       }}
    124 │       components={{
  > 125 │         Root: ({ className, rootRef, ...props }) => {
        │                  ^^^^^^^^^
    126 │           return (
    127 │             <div

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    17 │ function Calendar({
  > 18 │   className,
       │   ^^^^^^^^^
    19 │   classNames,
    20 │   showOutsideDays = true,

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/calendar.tsx:125:41 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    123 │       }}
    124 │       components={{
  > 125 │         Root: ({ className, rootRef, ...props }) => {
        │                                         ^^^^^
    126 │           return (
    127 │             <div

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    23 │   formatters,
    24 │   components,
  > 25 │   ...props
       │      ^^^^^
    26 │ }: React.ComponentProps<typeof DayPicker> & {
    27 │   buttonVariant?: React.ComponentProps<typeof Button>["variant"];

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/calendar.tsx:135:21 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    133 │           );
    134 │         },
  > 135 │         Chevron: ({ className, orientation, ...props }) => {
        │                     ^^^^^^^^^
    136 │           if (orientation === "left") {
    137 │             return (

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    17 │ function Calendar({
  > 18 │   className,
       │   ^^^^^^^^^
    19 │   classNames,
    20 │   showOutsideDays = true,

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/calendar.tsx:135:48 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    133 │           );
    134 │         },
  > 135 │         Chevron: ({ className, orientation, ...props }) => {
        │                                                ^^^^^
    136 │           if (orientation === "left") {
    137 │             return (

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    23 │   formatters,
    24 │   components,
  > 25 │   ...props
       │      ^^^^^
    26 │ }: React.ComponentProps<typeof DayPicker> & {
    27 │   buttonVariant?: React.ComponentProps<typeof Button>["variant"];

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/calendar.tsx:156:37 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    154 │         },
    155 │         DayButton: CalendarDayButton,
  > 156 │         WeekNumber: ({ children, ...props }) => {
        │                                     ^^^^^
    157 │           return (
    158 │             <td {...props}>

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    23 │   formatters,
    24 │   components,
  > 25 │   ...props
       │      ^^^^^
    26 │ }: React.ComponentProps<typeof DayPicker> & {
    27 │   buttonVariant?: React.ComponentProps<typeof Button>["variant"];

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/carousel.tsx:7:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    5 │ } from "embla-carousel-react";
    6 │ import { ArrowLeft, ArrowRight } from "lucide-react";
  > 7 │ import * as React from "react";
      │        ^^^^^^^^^^^^^^^^^^^^^^^
    8 │ import { Button } from "@/components/ui/button";
    9 │ import { cn } from "@/lib/utils";

  ℹ Use named imports instead.


src/components/ui/carousel.tsx:131:9 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━━

  ⚠ The elements with this role can be changed to the following elements:
    <section>

    129 │         data-slot="carousel"
    130 │         onKeyDownCapture={handleKeyDown}
  > 131 │         role="region"
        │         ^^^^^^^^^^^^^
    132 │         {...props}
    133 │       >

  ℹ For examples and more information, see WAI-ARIA Roles


src/components/ui/carousel.tsx:173:7 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━━

  ⚠ The elements with this role can be changed to the following elements:
    <fieldset>

    171 │       )}
    172 │       data-slot="carousel-item"
  > 173 │       role="group"
        │       ^^^^^^^^^^^^
    174 │       {...props}
    175 │     />

  ℹ For examples and more information, see WAI-ARIA Roles


src/components/ui/carousel.tsx:63:39 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    61 │   const [canScrollNext, setCanScrollNext] = React.useState(false);
    62 │
  > 63 │   const onSelect = React.useCallback((api: CarouselApi) => {
       │                                       ^^^
    64 │     if (!api) {
    65 │       return;

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    51 │   ...props
    52 │ }: React.ComponentProps<"div"> & CarouselProps) {
  > 53 │   const [carouselRef, api] = useEmblaCarousel(
       │                       ^^^
    54 │     {
    55 │       ...opts,

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/chart.tsx:3:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    1 │ "use client";
    2 │
  > 3 │ import * as React from "react";
      │        ^^^^^^^^^^^^^^^^^^^^^^^
    4 │ import * as RechartsPrimitive from "recharts";
    5 │

  ℹ Use named imports instead.


src/components/ui/chart.tsx:4:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    3 │ import * as React from "react";
  > 4 │ import * as RechartsPrimitive from "recharts";
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │
    6 │ import { cn } from "@/lib/utils";

  ℹ Use named imports instead.


src/components/ui/chart.tsx:183:36 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 19 detected (max: 15).

    181 │       {nestLabel ? null : tooltipLabel}
    182 │       <div className="grid gap-1.5">
  > 183 │         {payload.map((item, index) => {
        │                                    ^^^
    184 │           const key = `${nameKey || item.name || item.dataKey || "value"}`;
    185 │           const itemConfig = getPayloadConfigFromPayload(config, item, key);

  ℹ Please refactor this function to reduce its complexity score from 19 to the max allowed complexity 15.


src/components/ui/chart.tsx:74:9 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    72 │ const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
    73 │   const colorConfig = Object.entries(config).filter(
  > 74 │     ([, config]) => config.theme || config.color
       │         ^^^^^^
    75 │   );
    76 │

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    70 │ }
    71 │
  > 72 │ const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
       │                           ^^^^^^
    73 │   const colorConfig = Object.entries(config).filter(
    74 │     ([, config]) => config.theme || config.color

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/chart.tsx:84:7 lint/security/noDangerouslySetInnerHtml ━━━━━━━━━━━

  ⚠ Avoid passing content using the dangerouslySetInnerHTML prop.

    82 │     // biome-ignore lint/security/noDangerouslySetInnerHtml: Safe - controlled CSS variable generation for theming
    83 │     <style
  > 84 │       dangerouslySetInnerHTML={{
       │       ^^^^^^^^^^^^^^^^^^^^^^^
    85 │         __html: Object.entries(THEMES)
    86 │           .map(

  ⚠ Setting content using code can expose users to cross-site scripting (XSS) attacks


src/components/ui/chart.tsx:82:5 suppressions/unused ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Suppression comment has no effect. Remove the suppression or make sure you are suppressing the correct rule.

    81 │   return (
  > 82 │     // biome-ignore lint/security/noDangerouslySetInnerHtml: Safe - controlled CSS variable generation for theming
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    83 │     <style
    84 │       dangerouslySetInnerHTML={{


src/components/ui/form.tsx:4:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    3 │ import { type Label as LabelPrimitive, Slot as SlotPrimitive } from "radix-ui";
  > 4 │ import * as React from "react";
      │        ^^^^^^^^^^^^^^^^^^^^^^^
    5 │
    6 │ import {

  ℹ Use named imports instead.


src/components/ui/input-otp.tsx:71:42 lint/a11y/useAriaPropsForRole ━━━━━━━━━━━━━━━━

  ⚠ The element with the separator ARIA role does not have the required ARIA attributes.

    69 │ function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
    70 │   return (
  > 71 │     <div data-slot="input-otp-separator" role="separator" {...props}>
       │                                          ^^^^^^^^^^^^^^^^
    72 │       <MinusIcon />
    73 │     </div>

  ℹ Missing ARIA prop(s):

  - aria-valuenow


src/components/ui/input-otp.tsx:71:5 lint/a11y/useFocusableInteractive ━━━━━━━━━━━━━

  ⚠ The HTML element with the interactive role "separator" is not focusable.

    69 │ function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
    70 │   return (
  > 71 │     <div data-slot="input-otp-separator" role="separator" {...props}>
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    72 │       <MinusIcon />
    73 │     </div>

  ℹ A non-interactive HTML element that is not focusable may not be reachable for users that rely on keyboard navigation, even with an added role like "separator".

  ℹ Add a tabIndex attribute to make this element focusable.


src/components/ui/input-otp.tsx:71:42 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━

  ⚠ The elements with this role can be changed to the following elements:
    <hr>

    69 │ function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
    70 │   return (
  > 71 │     <div data-slot="input-otp-separator" role="separator" {...props}>
       │                                          ^^^^^^^^^^^^^^^^
    72 │       <MinusIcon />
    73 │     </div>

  ℹ For examples and more information, see WAI-ARIA Roles


src/components/ui/input-otp.tsx:5:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    3 │ import { OTPInput, OTPInputContext } from "input-otp";
    4 │ import { MinusIcon } from "lucide-react";
  > 5 │ import * as React from "react";
      │        ^^^^^^^^^^^^^^^^^^^^^^^
    6 │
    7 │ import { cn } from "@/lib/utils";

  ℹ Use named imports instead.


src/components/ui/pagination.tsx:50:5 lint/nursery/useAnchorHref ━━━━━━━━━━━━━━━━━━━

  ⚠ Missing required href attribute on a element

    48 │ }: PaginationLinkProps) {
    49 │   return (
  > 50 │     <a
       │     ^^
  > 51 │       aria-current={isActive ? "page" : undefined}
        ...
  > 61 │       {...props}
  > 62 │     />
       │     ^^
    63 │   );
    64 │ }

  ℹ Anchor tags without href attributes are inaccessible to keyboard navigation and screen readers, violating WCAG 2.2 Success Criterion 4.1.2 (Name, Role, Value).

  ℹ Use href for navigation or <button> for actions. Reference: WCAG 4.1.2


src/components/ui/progress.tsx:25:44 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    23 │         className="h-full w-full flex-1 bg-primary transition-all"
    24 │         data-slot="progress-indicator"
  > 25 │         style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
       │                                            ^^^
    26 │       />
    27 │     </ProgressPrimitive.Root>

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/ui/resizable.tsx:5:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    3 │ import { GripVerticalIcon } from "lucide-react";
    4 │ import type * as React from "react";
  > 5 │ import * as ResizablePrimitive from "react-resizable-panels";
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    6 │
    7 │ import { cn } from "@/lib/utils";

  ℹ Use named imports instead.


src/components/ui/sidebar.tsx:6:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    4 │ import { PanelLeftIcon } from "lucide-react";
    5 │ import { Slot as SlotPrimitive } from "radix-ui";
  > 6 │ import * as React from "react";
      │        ^^^^^^^^^^^^^^^^^^^^^^^
    7 │ import { Button } from "@/components/ui/button";
    8 │ import { Input } from "@/components/ui/input";

  ℹ Use named imports instead.


src/components/ui/sidebar.tsx:28:47 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    27 │ const SIDEBAR_COOKIE_NAME = "sidebar_state";
  > 28 │ const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
       │                                               ^
    29 │ const SIDEBAR_WIDTH = "16rem";
    30 │ const SIDEBAR_WIDTH_MOBILE = "18rem";

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/ui/sidebar.tsx:611:42 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    609 │   // Random width between 50 to 90%.
    610 │   const width = React.useMemo(() => {
  > 611 │     return `${Math.floor(Math.random() * 40) + 50}%`;
        │                                          ^^
    612 │   }, []);
    613 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/ui/sidebar.tsx:611:48 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    609 │   // Random width between 50 to 90%.
    610 │   const width = React.useMemo(() => {
  > 611 │     return `${Math.floor(Math.random() * 40) + 50}%`;
        │                                                ^^
    612 │   }, []);
    613 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/components/ui/sidebar.tsx:76:25 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    74 │   const open = openProp ?? _open;
    75 │   const setOpen = React.useCallback(
  > 76 │     (value: boolean | ((value: boolean) => boolean)) => {
       │                         ^^^^^
    77 │       const openState = typeof value === "function" ? value(open) : value;
    78 │       if (setOpenProp) {

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    74 │   const open = openProp ?? _open;
    75 │   const setOpen = React.useCallback(
  > 76 │     (value: boolean | ((value: boolean) => boolean)) => {
       │      ^^^^^
    77 │       const openState = typeof value === "function" ? value(open) : value;
    78 │       if (setOpenProp) {

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/sidebar.tsx:93:38 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    91 │   // Helper to toggle the sidebar.
    92 │   const toggleSidebar = React.useCallback(() => {
  > 93 │     return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
       │                                      ^^^^
    94 │   }, [isMobile, setOpen]);
    95 │

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    72 │   // We use openProp and setOpenProp for control from outside the component.
    73 │   const [_open, _setOpen] = React.useState(defaultOpen);
  > 74 │   const open = openProp ?? _open;
       │         ^^^^
    75 │   const setOpen = React.useCallback(
    76 │     (value: boolean | ((value: boolean) => boolean)) => {

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/sidebar.tsx:93:65 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    91 │   // Helper to toggle the sidebar.
    92 │   const toggleSidebar = React.useCallback(() => {
  > 93 │     return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
       │                                                                 ^^^^
    94 │   }, [isMobile, setOpen]);
    95 │

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    72 │   // We use openProp and setOpenProp for control from outside the component.
    73 │   const [_open, _setOpen] = React.useState(defaultOpen);
  > 74 │   const open = openProp ?? _open;
       │         ^^^^
    75 │   const setOpen = React.useCallback(
    76 │     (value: boolean | ((value: boolean) => boolean)) => {

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/components/ui/slider.tsx:4:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    3 │ import { Slider as SliderPrimitive } from "radix-ui";
  > 4 │ import * as React from "react";
      │        ^^^^^^^^^^^^^^^^^^^^^^^
    5 │
    6 │ import { cn } from "@/lib/utils";

  ℹ Use named imports instead.


src/components/ui/slider.tsx:20:11 lint/style/noNestedTernary ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Do not nest ternary expressions.

    18 │       Array.isArray(value)
    19 │         ? value
  > 20 │         : Array.isArray(defaultValue)
       │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 21 │           ? defaultValue
  > 22 │           : [min, max],
       │           ^^^^^^^^^^^^
    23 │     [value, defaultValue, min, max]
    24 │   );

  ℹ Nesting ternary expressions can make code more difficult to understand.

  ℹ Convert nested ternary expression into if-else statements or separate the conditions to make the logic easier to understand.


src/components/ui/slider.tsx:56:16 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━

  ⚠ Avoid using the index of an array as key property in an element.

    54 │           className="block size-4 shrink-0 rounded-full border border-primary bg-background shadow-sm ring-ring/50 transition-[color,box-shadow] hover:ring-4 focus-visible:outline-hidden focus-visible:ring-4 disabled:pointer-events-none disabled:opacity-50"
    55 │           data-slot="slider-thumb"
  > 56 │           key={index}
       │                ^^^^^
    57 │         />
    58 │       ))}

  ℹ This is the source of the key value.

    50 │         />
    51 │       </SliderPrimitive.Track>
  > 52 │       {Array.from({ length: _values.length }, (_, index) => (
       │                                                   ^^^^^
    53 │         <SliderPrimitive.Thumb
    54 │           className="block size-4 shrink-0 rounded-full border border-primary bg-background shadow-sm ring-ring/50 transition-[color,box-shadow] hover:ring-4 focus-visible:outline-hidden focus-visible:ring-4 disabled:pointer-events-none disabled:opacity-50"

  ℹ The order of the items may change, and this also affects performances and component state.

  ℹ Check the React documentation.


src/components/ui/toggle-group.tsx:5:8 lint/performance/noNamespaceImport ━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

    3 │ import type { VariantProps } from "class-variance-authority";
    4 │ import { ToggleGroup as ToggleGroupPrimitive } from "radix-ui";
  > 5 │ import * as React from "react";
      │        ^^^^^^^^^^^^^^^^^^^^^^^
    6 │ import { toggleVariants } from "@/components/ui/toggle";
    7 │ import { cn } from "@/lib/utils";

  ℹ Use named imports instead.


src/environment.d.ts:2:3 lint/style/noNamespace ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ TypeScript's namespaces are an outdated way to organize code.

     1 │ declare global {
   > 2 │   namespace NodeJS {
       │   ^^^^^^^^^^^^^^^^^^
   > 3 │     type ProcessEnv = {
   > 4 │       PAYLOAD_SECRET: string;
        ...
   > 8 │     };
   > 9 │   }
       │   ^
    10 │ }
    11 │

  ℹ Prefer the ES6 modules (import/export) over namespaces.


src/fields/slug/formatSlug.ts:11:23 lint/correctness/noUnusedFunctionParameters ━━━━━━━━━━

  ⚠ This parameter is unused.

     9 │ export const formatSlugHook =
    10 │   (fallback: string): FieldHook =>
  > 11 │   ({ data, operation, originalDoc, value }) => {
       │                       ^^^^^^^^^^^
    12 │     if (typeof value === "string") {
    13 │       return formatSlug(value);

  ℹ Unused parameters might be the result of an incomplete refactoring.


src/fields/slug/index.ts:31:9 lint/nursery/noShadow ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This variable shadows another variable with the same name in the outer scope.

    29 │   // Expect ts error here because of typescript mismatching Partial<TextField> with TextField
    30 │   // @ts-expect-error
  > 31 │   const slugField: TextField = {
       │         ^^^^^^^^^
    32 │     name: "slug",
    33 │     type: "text",

  ℹ This is the shadowed variable, which is now inaccessible in the inner scope.

    13 │ ) => [TextField, CheckboxField];
    14 │
  > 15 │ export const slugField: Slug = (fieldToUse = "title", overrides = {}) => {
       │              ^^^^^^^^^
    16 │   const { slugOverrides, checkboxOverrides } = overrides;
    17 │

  ℹ Consider renaming this variable. It's easy to confuse the origin of variables if they share the same name.


src/hooks/use-mobile.ts:1:8 lint/performance/noNamespaceImport ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Avoid namespace imports, it can prevent efficient tree shaking and increase bundle size.

  > 1 │ import * as React from "react";
      │        ^^^^^^^^^^^^^^^^^^^^^^^
    2 │
    3 │ const MOBILE_BREAKPOINT = 768;

  ℹ Use named imports instead.


src/payload-types.ts:2427:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    2425 │       type: string;
    2426 │       children: {
  > 2427 │         type: any;
         │               ^^^
    2428 │         version: number;
    2429 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:192:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    190 │       type: string;
    191 │       children: {
  > 192 │         type: any;
        │               ^^^
    193 │         version: number;
    194 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:341:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    339 │       type: string;
    340 │       children: {
  > 341 │         type: any;
        │               ^^^
    342 │         version: number;
    343 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:1122:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    1120 │       type: string;
    1121 │       children: {
  > 1122 │         type: any;
         │               ^^^
    1123 │         version: number;
    1124 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:1420:25 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    1418 │                 type: string;
    1419 │                 children: {
  > 1420 │                   type: any;
         │                         ^^^
    1421 │                   version: number;
    1422 │                   [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:1510:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    1508 │       type: string;
    1509 │       children: {
  > 1510 │         type: any;
         │               ^^^
    1511 │         version: number;
    1512 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:1542:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    1540 │             type: string;
    1541 │             children: {
  > 1542 │               type: any;
         │                     ^^^
    1543 │               version: number;
    1544 │               [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:2378:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    2376 │       type: string;
    2377 │       children: {
  > 2378 │         type: any;
         │               ^^^
    2379 │         version: number;
    2380 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:130:18 lint/complexity/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Don't use '{}' as a type.

    128 │   };
    129 │   globals: {};
  > 130 │   globalsSelect: {};
        │                  ^^
    131 │   locale: null;
    132 │   user: User & {

  ℹ Prefer explicitly define the object shape. '{}' means "any non-nullable value".


src/payload-types.ts:2456:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    2454 │       type: string;
    2455 │       children: {
  > 2456 │         type: any;
         │               ^^^
    2457 │         version: number;
    2458 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:2480:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    2478 │       type: string;
    2479 │       children: {
  > 2480 │         type: any;
         │               ^^^
    2481 │         version: number;
    2482 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:2513:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    2511 │       type: string;
    2512 │       children: {
  > 2513 │         type: any;
         │               ^^^
    2514 │         version: number;
    2515 │         [k: string]: unknown;

  ℹ any disables many type checking rules. Its use should be avoided.


src/payload-types.ts:68:11 lint/complexity/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Don't use '{}' as a type.

    66 │     users: UserAuthOperations;
    67 │   };
  > 68 │   blocks: {};
       │           ^^
    69 │   collections: {
    70 │     posts: Post;

  ℹ Prefer explicitly define the object shape. '{}' means "any non-nullable value".


src/payload-types.ts:93:21 lint/complexity/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Don't use '{}' as a type.

    91 │     "payload-migrations": PayloadMigration;
    92 │   };
  > 93 │   collectionsJoins: {};
       │                     ^^
    94 │   collectionsSelect: {
    95 │     posts: PostsSelect<false> | PostsSelect<true>;

  ℹ Prefer explicitly define the object shape. '{}' means "any non-nullable value".


src/payload-types.ts:129:12 lint/complexity/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Don't use '{}' as a type.

    127 │     defaultIDType: number;
    128 │   };
  > 129 │   globals: {};
        │            ^^
    130 │   globalsSelect: {};
    131 │   locale: null;

  ℹ Prefer explicitly define the object shape. '{}' means "any non-nullable value".


src/payload.config.ts:38:11 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

    37 │   // Skip heavy operations in development
  > 38 │   onInit: async (payload) => {
       │           ^^^^^^^^^^^^^^^^^^^^
  > 39 │     if (process.env.NODE_ENV === "development") {
  > 40 │       payload.logger.info("🚀 Payload CMS initialized in development mode");
  > 41 │     }
  > 42 │   },
       │   ^
    43 │
    44 │   admin: {

  ℹ Remove this async modifier, or add an await expression in the function.

    37 │   // Skip heavy operations in development
  > 38 │   onInit: async (payload) => {
       │           ^^^^^^^^^^^^^^^^^^^^
  > 39 │     if (process.env.NODE_ENV === "development") {
  > 40 │       payload.logger.info("🚀 Payload CMS initialized in development mode");
  > 41 │     }
  > 42 │   },
       │   ^
    43 │
    44 │   admin: {

  ℹ Async functions without await expressions may not need to be declared async.


src/payload.config.ts:85:56 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    83 │       connectionString: process.env.POSTGRES_URL || "",
    84 │       // Optimized settings for faster schema introspection
  > 85 │       max: process.env.NODE_ENV === "production" ? 1 : 3, // Reduce dev connections
       │                                                        ^
    86 │       min: 0, // No minimum connections
    87 │       idleTimeoutMillis: 10_000, // Faster idle timeout (10s)

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/search/beforeSync.ts:4:49 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

     2 │ import type { Post } from "@/payload-types";
     3 │
   > 4 │ export const beforeSyncWithSearch: BeforeSync = async ({
       │                                                 ^^^^^^^^
   > 5 │   originalDoc,
        ...
  > 20 │     slug: post.slug,
  > 21 │   };
  > 22 │ };
       │ ^
    23 │

  ℹ Remove this async modifier, or add an await expression in the function.

     2 │ import type { Post } from "@/payload-types";
     3 │
   > 4 │ export const beforeSyncWithSearch: BeforeSync = async ({
       │                                                 ^^^^^^^^
   > 5 │   originalDoc,
        ...
  > 20 │     slug: post.slug,
  > 21 │   };
  > 22 │ };
       │ ^
    23 │

  ℹ Async functions without await expressions may not need to be declared async.


src/types/embeddings.ts:63:31 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    62 │ // Collection-specific text extractors
  > 63 │ export type TextExtractor<T = any> = (data: T) => string;
       │                               ^^^
    64 │
    65 │ // Similarity search types

  ℹ any disables many type checking rules. Its use should be avoided.


src/types/embeddings.ts:73:34 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    71 │ };
    72 │
  > 73 │ export type SimilarityResult<T = any> = {
       │                                  ^^^
    74 │   item: T;
    75 │   similarity: number;

  ℹ any disables many type checking rules. Its use should be avoided.


src/types/embeddings.ts:79:40 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    77 │ };
    78 │
  > 79 │ export type SimilaritySearchResult<T = any> = {
       │                                        ^^^
    80 │   query: string;
    81 │   results: SimilarityResult<T>[];

  ℹ any disables many type checking rules. Its use should be avoided.


src/types/embeddings.ts:96:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    94 │   publishedAt: string;
    95 │   updatedAt: string;
  > 96 │   content?: any;
       │             ^^^
    97 │ };
    98 │

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/admin-embedding-tools.ts:11:33 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    10 │ // Posts-specific text extraction for admin tools
  > 11 │ function extractPostsText(post: any): string {
       │                                 ^^^
    12 │   const parts: string[] = [];
    13 │

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/admin-embedding-tools.ts:57:64 lint/style/noMagicNumbers ━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    55 │   const coverage =
    56 │     allPosts.totalDocs > 0
  > 57 │       ? (postsWithEmbeddings.totalDocs / allPosts.totalDocs) * 100
       │                                                                ^^^
    58 │       : 0;
    59 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/admin-embedding-tools.ts:127:12 lint/suspicious/noExplicitAny ━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    125 │         embedding_generated_at: new Date().toISOString(),
    126 │         embedding_text_hash: textHash,
  > 127 │       } as any, // Type assertion for new pgvector fields
        │            ^^^
    128 │     });
    129 │

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/admin-embedding-tools.ts:159:9 lint/suspicious/noEvolvingTypes ━━━━━━━━━━

  ⚠ The type of this variable may evolve implicitly to any type, including the any type.

    157 │   }
    158 │
  > 159 │   const results = [];
        │         ^^^^^^^
    160 │
    161 │   for (const post of postsToProcess) {

  ℹ Add an explicit type or initialization to avoid implicit type evolution.


src/utilities/admin-embedding-tools.ts:166:56 lint/style/noMagicNumbers ━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    165 │     // Small delay to avoid overwhelming the system
  > 166 │     await new Promise((resolve) => setTimeout(resolve, 100));
        │                                                        ^^^
    167 │   }
    168 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/deepMerge.ts:20:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Prefer for...of instead of forEach.

    18 │   const output = { ...target };
    19 │   if (isObject(target) && isObject(source)) {
  > 20 │     Object.keys(source).forEach((key) => {
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 21 │       if (isObject(source[key])) {
        ...
  > 29 │       }
  > 30 │     });
       │     ^^
    31 │   }
    32 │

  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.


src/utilities/generate-embedding.ts:47:74 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    45 │ // Create a hash of the text content for change detection
    46 │ export function createTextHash(text: string): string {
  > 47 │   return crypto.createHash("sha256").update(text).digest("hex").slice(0, 16);
       │                                                                          ^^
    48 │ }
    49 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:71:32 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    69 │     const { embedding } = await embed({
    70 │       model: openai.embedding("text-embedding-3-small"),
  > 71 │       value: text.substring(0, 8000), // OpenAI token limit
       │                                ^^^^
    72 │     });
    73 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:92:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    90 │ // Check if embedding needs to be regenerated
    91 │ export function shouldRegenerateEmbedding(
  > 92 │   currentEmbedding: any,
       │                     ^^^
    93 │   newTextHash: string
    94 │ ): boolean {

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/generate-embedding.ts:105:21 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    103 │   // Check if embedding is too old (regenerate weekly)
    104 │   if (currentEmbedding.generatedAt) {
  > 105 │     const oneWeek = 7 * 24 * 60 * 60 * 1000;
        │                     ^
    106 │     const generatedAt = new Date(currentEmbedding.generatedAt);
    107 │     if (Date.now() - generatedAt.getTime() > oneWeek) {

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:105:40 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    103 │   // Check if embedding is too old (regenerate weekly)
    104 │   if (currentEmbedding.generatedAt) {
  > 105 │     const oneWeek = 7 * 24 * 60 * 60 * 1000;
        │                                        ^^^^
    106 │     const generatedAt = new Date(currentEmbedding.generatedAt);
    107 │     if (Date.now() - generatedAt.getTime() > oneWeek) {

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:117:23 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    115 │ // Shared embedding hook factory - creates collection-specific hooks
    116 │ export function createEmbeddingHook(
  > 117 │   extractText: (data: any) => string,
        │                       ^^^
    118 │   collectionName: string
    119 │ ): CollectionBeforeChangeHook {

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/generate-embedding.ts:120:56 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 26 detected (max: 15).

    118 │   collectionName: string
    119 │ ): CollectionBeforeChangeHook {
  > 120 │   return async ({ data, originalDoc, operation, req }) => {
        │                                                        ^^^
    121 │     // Check for force regeneration flag
    122 │     const forceRegenerate = req.query?.regenerateEmbedding === "true";

  ℹ Please refactor this function to reduce its complexity score from 26 to the max allowed complexity 15.


src/utilities/generate-embedding.ts:7:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    6 │ // Helper function to extract text from Lexical content
  > 7 │ function extractTextFromContent(content: any): string {
      │                                          ^^^
    8 │   if (!content) {
    9 │     return "";

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/generate-embedding.ts:36:28 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    35 │   // Convert hash to deterministic vector
  > 36 │   const vector = new Array(384).fill(0).map((_, i) => {
       │                            ^^^
    37 │     const slice = hash.slice(i % 32, (i % 32) + 8);
    38 │     const num = Number.parseInt(slice, 16);

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:37:34 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    35 │   // Convert hash to deterministic vector
    36 │   const vector = new Array(384).fill(0).map((_, i) => {
  > 37 │     const slice = hash.slice(i % 32, (i % 32) + 8);
       │                                  ^^
    38 │     const num = Number.parseInt(slice, 16);
    39 │     return (num / 0xff_ff_ff_ff - 0.5) * 2; // Normalize to [-1, 1]

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:37:43 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    35 │   // Convert hash to deterministic vector
    36 │   const vector = new Array(384).fill(0).map((_, i) => {
  > 37 │     const slice = hash.slice(i % 32, (i % 32) + 8);
       │                                           ^^
    38 │     const num = Number.parseInt(slice, 16);
    39 │     return (num / 0xff_ff_ff_ff - 0.5) * 2; // Normalize to [-1, 1]

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:37:49 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    35 │   // Convert hash to deterministic vector
    36 │   const vector = new Array(384).fill(0).map((_, i) => {
  > 37 │     const slice = hash.slice(i % 32, (i % 32) + 8);
       │                                                 ^
    38 │     const num = Number.parseInt(slice, 16);
    39 │     return (num / 0xff_ff_ff_ff - 0.5) * 2; // Normalize to [-1, 1]

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:39:19 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    37 │     const slice = hash.slice(i % 32, (i % 32) + 8);
    38 │     const num = Number.parseInt(slice, 16);
  > 39 │     return (num / 0xff_ff_ff_ff - 0.5) * 2; // Normalize to [-1, 1]
       │                   ^^^^^^^^^^^^^
    40 │   });
    41 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generate-embedding.ts:39:35 lint/style/noMagicNumbers ━━━━━━━━━━━━━━━━

  ⚠ Magic number detected. Extract it to a constant with a meaningful name.

    37 │     const slice = hash.slice(i % 32, (i % 32) + 8);
    38 │     const num = Number.parseInt(slice, 16);
  > 39 │     return (num / 0xff_ff_ff_ff - 0.5) * 2; // Normalize to [-1, 1]
       │                                   ^^^
    40 │   });
    41 │

  ℹ Code is more readable and refactoring easier when special numbers are declared as constants as it makes their meaning explicit.


src/utilities/generateMeta.ts:6:29 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ This async function lacks an await expression.

     4 │ import { mergeOpenGraph } from "./mergeOpenGraph";
     5 │
   > 6 │ export const generateMeta = async (args: {
       │                             ^^^^^^^^^^^^^^
   > 7 │   doc: Partial<Post>;
        ...
  > 37 │     title,
  > 38 │   };
  > 39 │ };
       │ ^
    40 │

  ℹ Remove this async modifier, or add an await expression in the function.

     4 │ import { mergeOpenGraph } from "./mergeOpenGraph";
     5 │
   > 6 │ export const generateMeta = async (args: {
       │                             ^^^^^^^^^^^^^^
   > 7 │   doc: Partial<Post>;
        ...
  > 37 │     title,
  > 38 │   };
  > 39 │ };
       │ ^
    40 │

  ℹ Async functions without await expressions may not need to be declared async.


src/utilities/generateMeta.ts:12:51 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    11 │   // Use main fields with fallbacks to old meta fields during migration
  > 12 │   const postImage = doc?.featuredImage || (doc as any)?.meta?.image;
       │                                                   ^^^
    13 │   const ogImage =
    14 │     typeof postImage === "object" &&

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/generateMeta.ts:21:51 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

    20 │   const title = doc?.title ? `${doc?.title} | Lyovson.com` : "Lyovson.com";
  > 21 │   const description = doc?.description || (doc as any)?.meta?.description;
       │                                                   ^^^
    22 │
    23 │   return {

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/generateMeta.ts:9:19 lint/nursery/noUnnecessaryConditions ━━━━━━━━━━━━

  ⚠ This condition is always truthy based on the type.

     7 │   doc: Partial<Post>;
     8 │ }): Promise<Metadata> => {
   > 9 │   const { doc } = args || {};
       │                   ^^^^
    10 │
    11 │   // Use main fields with fallbacks to old meta fields during migration

  ℹ The type being checked can never be falsy, making this condition redundant.

  ℹ Remove the condition.


src/utilities/generatePreviewPath.ts:10:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.

     8 │   collection: keyof typeof collectionPrefixMap;
     9 │   slug: string;
  > 10 │   project?: any;
       │             ^^^
    11 │ };
    12 │

  ℹ any disables many type checking rules. Its use should be avoided.


src/utilities/getMeUser.ts:13:51 lint/nursery/noUnnecessaryConditions ━━━━━━━━━━━━━━

  ⚠ This condition is always truthy based on the type.

    11 │   user: User;
    12 │ }> => {
  > 13 │   const { nullUserRedirect, validUserRedirect } = args || {};
       │                                                   ^^^^
    14 │   const cookieStore = await cookies();
    15 │   const token = cookieStore.get("payload-token")?.value;

  ℹ The type being checked can never be falsy, making this condition redundant.

  ℹ Remove the condition.


src/utilities/getMeUser.ts:39:12 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━

  ⚠ Forbidden non-null assertion.

    37 │   // Token will exist here because if it doesn't the user will be redirected
    38 │   return {
  > 39 │     token: token!,
       │            ^^^^^^
    40 │     user,
    41 │   };


src/utilities/useClickableCard.ts:54:3 suppressions/unused ━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Suppression comment has no effect. Remove the suppression or make sure you are suppressing the correct rule.

    52 │   }, []); // Refs don't need to be in dependencies
    53 │
  > 54 │   // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: Click detection requires multiple conditions to handle edge cases properly
       │   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    55 │   const handleMouseUp = useCallback(
    56 │     (e: MouseEvent) => {


src/utilities/useClickableCard.ts:56:21 lint/complexity/noExcessiveCognitiveComplexity ━━━━━━━━━━

  ⚠ Excessive complexity of 16 detected (max: 15).

    54 │   // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: Click detection requires multiple conditions to handle edge cases properly
    55 │   const handleMouseUp = useCallback(
  > 56 │     (e: MouseEvent) => {
       │                     ^^^
    57 │       if (link.current?.href) {
    58 │         const timeNow = Date.now();

  ℹ Please refactor this function to reduce its complexity score from 16 to the max allowed complexity 15.


Checked 255 files in 4s. No fixes applied.
Found 262 warnings.

lyovsoncom main  ? ❯ s^C

lyovsoncom main  ? ✗ ^C

lyovsoncom main  ? ✗