/* tslint:disable */
 
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-vercel-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  serial,
  jsonb,
  numeric,
  timestamp,
  boolean,
  type AnyPgColumn,
  text,
  pgEnum,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-vercel-postgres/drizzle'
export const enum_posts_type_select = pgEnum('enum_posts_type_select', [
  'article',
  'review',
  'video',
  'podcast',
  'photo',
])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_type_select = pgEnum('enum__posts_v_version_type_select', [
  'article',
  'review',
  'video',
  'podcast',
  'photo',
])
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum_contacts_status = pgEnum('enum_contacts_status', [
  'pending',
  'active',
  'unsubscribed',
])
export const enum_books_status = pgEnum('enum_books_status', ['draft', 'published'])
export const enum__books_v_version_status = pgEnum('enum__books_v_version_status', [
  'draft',
  'published',
])
export const enum_people_roles = pgEnum('enum_people_roles', [
  'author',
  'director',
  'actor',
  'musician',
  'developer',
  'publicFigure',
])
export const enum_notes_author = pgEnum('enum_notes_author', ['rafa', 'jess'])
export const enum_notes_visibility = pgEnum('enum_notes_visibility', ['public'])
export const enum_notes_status = pgEnum('enum_notes_status', ['draft', 'published'])
export const enum__notes_v_version_author = pgEnum('enum__notes_v_version_author', ['rafa', 'jess'])
export const enum__notes_v_version_visibility = pgEnum('enum__notes_v_version_visibility', [
  'public',
])
export const enum__notes_v_version_status = pgEnum('enum__notes_v_version_status', [
  'draft',
  'published',
])
export const enum_links_reference_type = pgEnum('enum_links_reference_type', [
  'books',
  'movies',
  'tvShows',
  'videoGames',
  'posts',
  'people',
  'notes',
  'projects',
])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    username: varchar('username'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: varchar('description'),
    content: jsonb('content'),
    type: integer('type_id').references(() => types.id, {
      onDelete: 'set null',
    }),
    typeSelect: enum_posts_type_select('type_select').default('article'),
    rating: numeric('rating'),
    videoEmbedUrl: varchar('video_embed_url'),
    podcastEmbedUrl: varchar('podcast_embed_url'),
    project: integer('project_id').references(() => projects.id, {
      onDelete: 'set null',
    }),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    embedding_vector: jsonb('embedding_vector'),
    embedding_model: varchar('embedding_model'),
    embedding_dimensions: numeric('embedding_dimensions'),
    embedding_generatedAt: timestamp('embedding_generated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    embedding_textHash: varchar('embedding_text_hash'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_featured_image_idx: index('posts_featured_image_idx').on(columns.featuredImage),
    posts_type_idx: index('posts_type_idx').on(columns.type),
    posts_project_idx: index('posts_project_idx').on(columns.project),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    booksID: integer('books_id'),
    moviesID: integer('movies_id'),
    tvShowsID: integer('tv_shows_id'),
    videoGamesID: integer('video_games_id'),
    topicsID: integer('topics_id'),
    peopleID: integer('people_id'),
    notesID: integer('notes_id'),
    postsID: integer('posts_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_books_id_idx: index('posts_rels_books_id_idx').on(columns.booksID),
    posts_rels_movies_id_idx: index('posts_rels_movies_id_idx').on(columns.moviesID),
    posts_rels_tv_shows_id_idx: index('posts_rels_tv_shows_id_idx').on(columns.tvShowsID),
    posts_rels_video_games_id_idx: index('posts_rels_video_games_id_idx').on(columns.videoGamesID),
    posts_rels_topics_id_idx: index('posts_rels_topics_id_idx').on(columns.topicsID),
    posts_rels_people_id_idx: index('posts_rels_people_id_idx').on(columns.peopleID),
    posts_rels_notes_id_idx: index('posts_rels_notes_id_idx').on(columns.notesID),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    booksIdFk: foreignKey({
      columns: [columns['booksID']],
      foreignColumns: [books.id],
      name: 'posts_rels_books_fk',
    }).onDelete('cascade'),
    moviesIdFk: foreignKey({
      columns: [columns['moviesID']],
      foreignColumns: [movies.id],
      name: 'posts_rels_movies_fk',
    }).onDelete('cascade'),
    tvShowsIdFk: foreignKey({
      columns: [columns['tvShowsID']],
      foreignColumns: [tv_shows.id],
      name: 'posts_rels_tv_shows_fk',
    }).onDelete('cascade'),
    videoGamesIdFk: foreignKey({
      columns: [columns['videoGamesID']],
      foreignColumns: [video_games.id],
      name: 'posts_rels_video_games_fk',
    }).onDelete('cascade'),
    topicsIdFk: foreignKey({
      columns: [columns['topicsID']],
      foreignColumns: [topics.id],
      name: 'posts_rels_topics_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: 'posts_rels_people_fk',
    }).onDelete('cascade'),
    notesIdFk: foreignKey({
      columns: [columns['notesID']],
      foreignColumns: [notes.id],
      name: 'posts_rels_notes_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
    username: varchar('username'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_description: varchar('version_description'),
    version_content: jsonb('version_content'),
    version_type: integer('version_type_id').references(() => types.id, {
      onDelete: 'set null',
    }),
    version_typeSelect: enum__posts_v_version_type_select('version_type_select').default('article'),
    version_rating: numeric('version_rating'),
    version_videoEmbedUrl: varchar('version_video_embed_url'),
    version_podcastEmbedUrl: varchar('version_podcast_embed_url'),
    version_project: integer('version_project_id').references(() => projects.id, {
      onDelete: 'set null',
    }),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_embedding_vector: jsonb('version_embedding_vector'),
    version_embedding_model: varchar('version_embedding_model'),
    version_embedding_dimensions: numeric('version_embedding_dimensions'),
    version_embedding_generatedAt: timestamp('version_embedding_generated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_embedding_textHash: varchar('version_embedding_text_hash'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_featured_image_idx: index(
      '_posts_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _posts_v_version_version_type_idx: index('_posts_v_version_version_type_idx').on(
      columns.version_type,
    ),
    _posts_v_version_version_project_idx: index('_posts_v_version_version_project_idx').on(
      columns.version_project,
    ),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    booksID: integer('books_id'),
    moviesID: integer('movies_id'),
    tvShowsID: integer('tv_shows_id'),
    videoGamesID: integer('video_games_id'),
    topicsID: integer('topics_id'),
    peopleID: integer('people_id'),
    notesID: integer('notes_id'),
    postsID: integer('posts_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_books_id_idx: index('_posts_v_rels_books_id_idx').on(columns.booksID),
    _posts_v_rels_movies_id_idx: index('_posts_v_rels_movies_id_idx').on(columns.moviesID),
    _posts_v_rels_tv_shows_id_idx: index('_posts_v_rels_tv_shows_id_idx').on(columns.tvShowsID),
    _posts_v_rels_video_games_id_idx: index('_posts_v_rels_video_games_id_idx').on(
      columns.videoGamesID,
    ),
    _posts_v_rels_topics_id_idx: index('_posts_v_rels_topics_id_idx').on(columns.topicsID),
    _posts_v_rels_people_id_idx: index('_posts_v_rels_people_id_idx').on(columns.peopleID),
    _posts_v_rels_notes_id_idx: index('_posts_v_rels_notes_id_idx').on(columns.notesID),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    booksIdFk: foreignKey({
      columns: [columns['booksID']],
      foreignColumns: [books.id],
      name: '_posts_v_rels_books_fk',
    }).onDelete('cascade'),
    moviesIdFk: foreignKey({
      columns: [columns['moviesID']],
      foreignColumns: [movies.id],
      name: '_posts_v_rels_movies_fk',
    }).onDelete('cascade'),
    tvShowsIdFk: foreignKey({
      columns: [columns['tvShowsID']],
      foreignColumns: [tv_shows.id],
      name: '_posts_v_rels_tv_shows_fk',
    }).onDelete('cascade'),
    videoGamesIdFk: foreignKey({
      columns: [columns['videoGamesID']],
      foreignColumns: [video_games.id],
      name: '_posts_v_rels_video_games_fk',
    }).onDelete('cascade'),
    topicsIdFk: foreignKey({
      columns: [columns['topicsID']],
      foreignColumns: [topics.id],
      name: '_posts_v_rels_topics_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: '_posts_v_rels_people_fk',
    }).onDelete('cascade'),
    notesIdFk: foreignKey({
      columns: [columns['notesID']],
      foreignColumns: [notes.id],
      name: '_posts_v_rels_notes_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
  }),
)

export const types = pgTable(
  'types',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    types_slug_idx: index('types_slug_idx').on(columns.slug),
    types_updated_at_idx: index('types_updated_at_idx').on(columns.updatedAt),
    types_created_at_idx: index('types_created_at_idx').on(columns.createdAt),
  }),
)

export const topics_breadcrumbs = pgTable(
  'topics_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => topics.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('topics_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('topics_breadcrumbs_parent_id_idx').on(columns._parentID),
    topics_breadcrumbs_doc_idx: index('topics_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [topics.id],
      name: 'topics_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const topics = pgTable(
  'topics',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    color: varchar('color'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    parent: integer('parent_id').references((): AnyPgColumn => topics.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    topics_slug_idx: index('topics_slug_idx').on(columns.slug),
    topics_parent_idx: index('topics_parent_idx').on(columns.parent),
    topics_updated_at_idx: index('topics_updated_at_idx').on(columns.updatedAt),
    topics_created_at_idx: index('topics_created_at_idx').on(columns.createdAt),
  }),
)

export const projects = pgTable(
  'projects',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    resendAudienceId: varchar('resend_audience_id').default('a34b0804-8e96-421c-8065-e9dc35277c1d'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    projects_image_idx: index('projects_image_idx').on(columns.image),
    projects_slug_idx: index('projects_slug_idx').on(columns.slug),
    projects_updated_at_idx: index('projects_updated_at_idx').on(columns.updatedAt),
    projects_created_at_idx: index('projects_created_at_idx').on(columns.createdAt),
  }),
)

export const projects_rels = pgTable(
  'projects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    contactsID: integer('contacts_id'),
  },
  (columns) => ({
    order: index('projects_rels_order_idx').on(columns.order),
    parentIdx: index('projects_rels_parent_idx').on(columns.parent),
    pathIdx: index('projects_rels_path_idx').on(columns.path),
    projects_rels_contacts_id_idx: index('projects_rels_contacts_id_idx').on(columns.contactsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [projects.id],
      name: 'projects_rels_parent_fk',
    }).onDelete('cascade'),
    contactsIdFk: foreignKey({
      columns: [columns['contactsID']],
      foreignColumns: [contacts.id],
      name: 'projects_rels_contacts_fk',
    }).onDelete('cascade'),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email'),
    username: varchar('username').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
    users_username_idx: uniqueIndex('users_username_idx').on(columns.username),
  }),
)

export const contacts = pgTable(
  'contacts',
  {
    id: serial('id').primaryKey(),
    email: varchar('email').notNull(),
    firstName: varchar('first_name'),
    lastName: varchar('last_name'),
    confirmationToken: varchar('confirmation_token'),
    confirmationExpiry: timestamp('confirmation_expiry', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    unsubscribed: boolean('unsubscribed').default(false),
    status: enum_contacts_status('status').default('pending'),
    project: integer('project_id')
      .notNull()
      .references(() => projects.id, {
        onDelete: 'set null',
      }),
    resendContactId: varchar('resend_contact_id'),
    subscribedAt: timestamp('subscribed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    notes: varchar('notes'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    contacts_email_idx: uniqueIndex('contacts_email_idx').on(columns.email),
    contacts_project_idx: index('contacts_project_idx').on(columns.project),
    contacts_updated_at_idx: index('contacts_updated_at_idx').on(columns.updatedAt),
    contacts_created_at_idx: index('contacts_created_at_idx').on(columns.createdAt),
  }),
)

export const books_rafas_quotes = pgTable(
  'books_rafas_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote'),
  },
  (columns) => ({
    _orderIdx: index('books_rafas_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('books_rafas_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [books.id],
      name: 'books_rafas_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const books_jesss_quotes = pgTable(
  'books_jesss_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote'),
  },
  (columns) => ({
    _orderIdx: index('books_jesss_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('books_jesss_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [books.id],
      name: 'books_jesss_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const books = pgTable(
  'books',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    coverImage: integer('cover_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    releaseDate: timestamp('release_date', { mode: 'string', withTimezone: true, precision: 3 }),
    embedding_vector: jsonb('embedding_vector'),
    embedding_model: varchar('embedding_model'),
    embedding_dimensions: numeric('embedding_dimensions'),
    embedding_generatedAt: timestamp('embedding_generated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    embedding_textHash: varchar('embedding_text_hash'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_books_status('_status').default('draft'),
  },
  (columns) => ({
    books_cover_image_idx: index('books_cover_image_idx').on(columns.coverImage),
    books_slug_idx: index('books_slug_idx').on(columns.slug),
    books_updated_at_idx: index('books_updated_at_idx').on(columns.updatedAt),
    books_created_at_idx: index('books_created_at_idx').on(columns.createdAt),
    books__status_idx: index('books__status_idx').on(columns._status),
  }),
)

export const books_rels = pgTable(
  'books_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    peopleID: integer('people_id'),
  },
  (columns) => ({
    order: index('books_rels_order_idx').on(columns.order),
    parentIdx: index('books_rels_parent_idx').on(columns.parent),
    pathIdx: index('books_rels_path_idx').on(columns.path),
    books_rels_people_id_idx: index('books_rels_people_id_idx').on(columns.peopleID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [books.id],
      name: 'books_rels_parent_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: 'books_rels_people_fk',
    }).onDelete('cascade'),
  }),
)

export const _books_v_version_rafas_quotes = pgTable(
  '_books_v_version_rafas_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    quote: varchar('quote'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_books_v_version_rafas_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('_books_v_version_rafas_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_books_v.id],
      name: '_books_v_version_rafas_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _books_v_version_jesss_quotes = pgTable(
  '_books_v_version_jesss_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    quote: varchar('quote'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_books_v_version_jesss_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('_books_v_version_jesss_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_books_v.id],
      name: '_books_v_version_jesss_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _books_v = pgTable(
  '_books_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => books.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_coverImage: integer('version_cover_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_releaseDate: timestamp('version_release_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_embedding_vector: jsonb('version_embedding_vector'),
    version_embedding_model: varchar('version_embedding_model'),
    version_embedding_dimensions: numeric('version_embedding_dimensions'),
    version_embedding_generatedAt: timestamp('version_embedding_generated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_embedding_textHash: varchar('version_embedding_text_hash'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__books_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _books_v_parent_idx: index('_books_v_parent_idx').on(columns.parent),
    _books_v_version_version_cover_image_idx: index('_books_v_version_version_cover_image_idx').on(
      columns.version_coverImage,
    ),
    _books_v_version_version_slug_idx: index('_books_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _books_v_version_version_updated_at_idx: index('_books_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _books_v_version_version_created_at_idx: index('_books_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _books_v_version_version__status_idx: index('_books_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _books_v_created_at_idx: index('_books_v_created_at_idx').on(columns.createdAt),
    _books_v_updated_at_idx: index('_books_v_updated_at_idx').on(columns.updatedAt),
    _books_v_latest_idx: index('_books_v_latest_idx').on(columns.latest),
    _books_v_autosave_idx: index('_books_v_autosave_idx').on(columns.autosave),
  }),
)

export const _books_v_rels = pgTable(
  '_books_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    peopleID: integer('people_id'),
  },
  (columns) => ({
    order: index('_books_v_rels_order_idx').on(columns.order),
    parentIdx: index('_books_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_books_v_rels_path_idx').on(columns.path),
    _books_v_rels_people_id_idx: index('_books_v_rels_people_id_idx').on(columns.peopleID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_books_v.id],
      name: '_books_v_rels_parent_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: '_books_v_rels_people_fk',
    }).onDelete('cascade'),
  }),
)

export const movies_rafas_quotes = pgTable(
  'movies_rafas_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote').notNull(),
  },
  (columns) => ({
    _orderIdx: index('movies_rafas_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('movies_rafas_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [movies.id],
      name: 'movies_rafas_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const movies_jesss_quotes = pgTable(
  'movies_jesss_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote').notNull(),
  },
  (columns) => ({
    _orderIdx: index('movies_jesss_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('movies_jesss_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [movies.id],
      name: 'movies_jesss_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const movies = pgTable(
  'movies',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    coverImage: integer('cover_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    releaseDate: timestamp('release_date', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    movies_cover_image_idx: index('movies_cover_image_idx').on(columns.coverImage),
    movies_slug_idx: index('movies_slug_idx').on(columns.slug),
    movies_updated_at_idx: index('movies_updated_at_idx').on(columns.updatedAt),
    movies_created_at_idx: index('movies_created_at_idx').on(columns.createdAt),
  }),
)

export const movies_rels = pgTable(
  'movies_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    peopleID: integer('people_id'),
  },
  (columns) => ({
    order: index('movies_rels_order_idx').on(columns.order),
    parentIdx: index('movies_rels_parent_idx').on(columns.parent),
    pathIdx: index('movies_rels_path_idx').on(columns.path),
    movies_rels_people_id_idx: index('movies_rels_people_id_idx').on(columns.peopleID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [movies.id],
      name: 'movies_rels_parent_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: 'movies_rels_people_fk',
    }).onDelete('cascade'),
  }),
)

export const tv_shows_rafas_quotes = pgTable(
  'tv_shows_rafas_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote').notNull(),
  },
  (columns) => ({
    _orderIdx: index('tv_shows_rafas_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('tv_shows_rafas_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [tv_shows.id],
      name: 'tv_shows_rafas_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const tv_shows_jesss_quotes = pgTable(
  'tv_shows_jesss_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote').notNull(),
  },
  (columns) => ({
    _orderIdx: index('tv_shows_jesss_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('tv_shows_jesss_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [tv_shows.id],
      name: 'tv_shows_jesss_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const tv_shows = pgTable(
  'tv_shows',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    coverImage: integer('cover_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    releaseDate: timestamp('release_date', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tv_shows_cover_image_idx: index('tv_shows_cover_image_idx').on(columns.coverImage),
    tv_shows_slug_idx: index('tv_shows_slug_idx').on(columns.slug),
    tv_shows_updated_at_idx: index('tv_shows_updated_at_idx').on(columns.updatedAt),
    tv_shows_created_at_idx: index('tv_shows_created_at_idx').on(columns.createdAt),
  }),
)

export const tv_shows_rels = pgTable(
  'tv_shows_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    peopleID: integer('people_id'),
  },
  (columns) => ({
    order: index('tv_shows_rels_order_idx').on(columns.order),
    parentIdx: index('tv_shows_rels_parent_idx').on(columns.parent),
    pathIdx: index('tv_shows_rels_path_idx').on(columns.path),
    tv_shows_rels_people_id_idx: index('tv_shows_rels_people_id_idx').on(columns.peopleID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [tv_shows.id],
      name: 'tv_shows_rels_parent_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: 'tv_shows_rels_people_fk',
    }).onDelete('cascade'),
  }),
)

export const video_games_rafas_quotes = pgTable(
  'video_games_rafas_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote').notNull(),
  },
  (columns) => ({
    _orderIdx: index('video_games_rafas_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('video_games_rafas_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [video_games.id],
      name: 'video_games_rafas_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const video_games_jesss_quotes = pgTable(
  'video_games_jesss_quotes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote').notNull(),
  },
  (columns) => ({
    _orderIdx: index('video_games_jesss_quotes_order_idx').on(columns._order),
    _parentIDIdx: index('video_games_jesss_quotes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [video_games.id],
      name: 'video_games_jesss_quotes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const video_games = pgTable(
  'video_games',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    coverImage: integer('cover_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    releaseDate: timestamp('release_date', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    video_games_cover_image_idx: index('video_games_cover_image_idx').on(columns.coverImage),
    video_games_slug_idx: index('video_games_slug_idx').on(columns.slug),
    video_games_updated_at_idx: index('video_games_updated_at_idx').on(columns.updatedAt),
    video_games_created_at_idx: index('video_games_created_at_idx').on(columns.createdAt),
  }),
)

export const video_games_rels = pgTable(
  'video_games_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    peopleID: integer('people_id'),
  },
  (columns) => ({
    order: index('video_games_rels_order_idx').on(columns.order),
    parentIdx: index('video_games_rels_parent_idx').on(columns.parent),
    pathIdx: index('video_games_rels_path_idx').on(columns.path),
    video_games_rels_people_id_idx: index('video_games_rels_people_id_idx').on(columns.peopleID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [video_games.id],
      name: 'video_games_rels_parent_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: 'video_games_rels_people_fk',
    }).onDelete('cascade'),
  }),
)

export const people_roles = pgTable(
  'people_roles',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_people_roles('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('people_roles_order_idx').on(columns.order),
    parentIdx: index('people_roles_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [people.id],
      name: 'people_roles_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const people = pgTable(
  'people',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    photo: integer('photo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    bio: varchar('bio'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    people_photo_idx: index('people_photo_idx').on(columns.photo),
    people_slug_idx: index('people_slug_idx').on(columns.slug),
    people_updated_at_idx: index('people_updated_at_idx').on(columns.updatedAt),
    people_created_at_idx: index('people_created_at_idx').on(columns.createdAt),
  }),
)

export const notes = pgTable(
  'notes',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    author: enum_notes_author('author'),
    visibility: enum_notes_visibility('visibility').default('public'),
    content: jsonb('content'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    embedding_vector: jsonb('embedding_vector'),
    embedding_model: varchar('embedding_model'),
    embedding_dimensions: numeric('embedding_dimensions'),
    embedding_generatedAt: timestamp('embedding_generated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    embedding_textHash: varchar('embedding_text_hash'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_notes_status('_status').default('draft'),
  },
  (columns) => ({
    notes_slug_idx: index('notes_slug_idx').on(columns.slug),
    notes_updated_at_idx: index('notes_updated_at_idx').on(columns.updatedAt),
    notes_created_at_idx: index('notes_created_at_idx').on(columns.createdAt),
    notes__status_idx: index('notes__status_idx').on(columns._status),
  }),
)

export const notes_rels = pgTable(
  'notes_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    booksID: integer('books_id'),
    moviesID: integer('movies_id'),
    tvShowsID: integer('tv_shows_id'),
    videoGamesID: integer('video_games_id'),
    peopleID: integer('people_id'),
    notesID: integer('notes_id'),
  },
  (columns) => ({
    order: index('notes_rels_order_idx').on(columns.order),
    parentIdx: index('notes_rels_parent_idx').on(columns.parent),
    pathIdx: index('notes_rels_path_idx').on(columns.path),
    notes_rels_posts_id_idx: index('notes_rels_posts_id_idx').on(columns.postsID),
    notes_rels_books_id_idx: index('notes_rels_books_id_idx').on(columns.booksID),
    notes_rels_movies_id_idx: index('notes_rels_movies_id_idx').on(columns.moviesID),
    notes_rels_tv_shows_id_idx: index('notes_rels_tv_shows_id_idx').on(columns.tvShowsID),
    notes_rels_video_games_id_idx: index('notes_rels_video_games_id_idx').on(columns.videoGamesID),
    notes_rels_people_id_idx: index('notes_rels_people_id_idx').on(columns.peopleID),
    notes_rels_notes_id_idx: index('notes_rels_notes_id_idx').on(columns.notesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [notes.id],
      name: 'notes_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'notes_rels_posts_fk',
    }).onDelete('cascade'),
    booksIdFk: foreignKey({
      columns: [columns['booksID']],
      foreignColumns: [books.id],
      name: 'notes_rels_books_fk',
    }).onDelete('cascade'),
    moviesIdFk: foreignKey({
      columns: [columns['moviesID']],
      foreignColumns: [movies.id],
      name: 'notes_rels_movies_fk',
    }).onDelete('cascade'),
    tvShowsIdFk: foreignKey({
      columns: [columns['tvShowsID']],
      foreignColumns: [tv_shows.id],
      name: 'notes_rels_tv_shows_fk',
    }).onDelete('cascade'),
    videoGamesIdFk: foreignKey({
      columns: [columns['videoGamesID']],
      foreignColumns: [video_games.id],
      name: 'notes_rels_video_games_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: 'notes_rels_people_fk',
    }).onDelete('cascade'),
    notesIdFk: foreignKey({
      columns: [columns['notesID']],
      foreignColumns: [notes.id],
      name: 'notes_rels_notes_fk',
    }).onDelete('cascade'),
  }),
)

export const _notes_v = pgTable(
  '_notes_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => notes.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_author: enum__notes_v_version_author('version_author'),
    version_visibility: enum__notes_v_version_visibility('version_visibility').default('public'),
    version_content: jsonb('version_content'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_embedding_vector: jsonb('version_embedding_vector'),
    version_embedding_model: varchar('version_embedding_model'),
    version_embedding_dimensions: numeric('version_embedding_dimensions'),
    version_embedding_generatedAt: timestamp('version_embedding_generated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_embedding_textHash: varchar('version_embedding_text_hash'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__notes_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _notes_v_parent_idx: index('_notes_v_parent_idx').on(columns.parent),
    _notes_v_version_version_slug_idx: index('_notes_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _notes_v_version_version_updated_at_idx: index('_notes_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _notes_v_version_version_created_at_idx: index('_notes_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _notes_v_version_version__status_idx: index('_notes_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _notes_v_created_at_idx: index('_notes_v_created_at_idx').on(columns.createdAt),
    _notes_v_updated_at_idx: index('_notes_v_updated_at_idx').on(columns.updatedAt),
    _notes_v_latest_idx: index('_notes_v_latest_idx').on(columns.latest),
    _notes_v_autosave_idx: index('_notes_v_autosave_idx').on(columns.autosave),
  }),
)

export const _notes_v_rels = pgTable(
  '_notes_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    booksID: integer('books_id'),
    moviesID: integer('movies_id'),
    tvShowsID: integer('tv_shows_id'),
    videoGamesID: integer('video_games_id'),
    peopleID: integer('people_id'),
    notesID: integer('notes_id'),
  },
  (columns) => ({
    order: index('_notes_v_rels_order_idx').on(columns.order),
    parentIdx: index('_notes_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_notes_v_rels_path_idx').on(columns.path),
    _notes_v_rels_posts_id_idx: index('_notes_v_rels_posts_id_idx').on(columns.postsID),
    _notes_v_rels_books_id_idx: index('_notes_v_rels_books_id_idx').on(columns.booksID),
    _notes_v_rels_movies_id_idx: index('_notes_v_rels_movies_id_idx').on(columns.moviesID),
    _notes_v_rels_tv_shows_id_idx: index('_notes_v_rels_tv_shows_id_idx').on(columns.tvShowsID),
    _notes_v_rels_video_games_id_idx: index('_notes_v_rels_video_games_id_idx').on(
      columns.videoGamesID,
    ),
    _notes_v_rels_people_id_idx: index('_notes_v_rels_people_id_idx').on(columns.peopleID),
    _notes_v_rels_notes_id_idx: index('_notes_v_rels_notes_id_idx').on(columns.notesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_notes_v.id],
      name: '_notes_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_notes_v_rels_posts_fk',
    }).onDelete('cascade'),
    booksIdFk: foreignKey({
      columns: [columns['booksID']],
      foreignColumns: [books.id],
      name: '_notes_v_rels_books_fk',
    }).onDelete('cascade'),
    moviesIdFk: foreignKey({
      columns: [columns['moviesID']],
      foreignColumns: [movies.id],
      name: '_notes_v_rels_movies_fk',
    }).onDelete('cascade'),
    tvShowsIdFk: foreignKey({
      columns: [columns['tvShowsID']],
      foreignColumns: [tv_shows.id],
      name: '_notes_v_rels_tv_shows_fk',
    }).onDelete('cascade'),
    videoGamesIdFk: foreignKey({
      columns: [columns['videoGamesID']],
      foreignColumns: [video_games.id],
      name: '_notes_v_rels_video_games_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: '_notes_v_rels_people_fk',
    }).onDelete('cascade'),
    notesIdFk: foreignKey({
      columns: [columns['notesID']],
      foreignColumns: [notes.id],
      name: '_notes_v_rels_notes_fk',
    }).onDelete('cascade'),
  }),
)

export const links = pgTable(
  'links',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    url: varchar('url').notNull(),
    referenceType: enum_links_reference_type('reference_type').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    links_updated_at_idx: index('links_updated_at_idx').on(columns.updatedAt),
    links_created_at_idx: index('links_created_at_idx').on(columns.createdAt),
  }),
)

export const links_rels = pgTable(
  'links_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    booksID: integer('books_id'),
    moviesID: integer('movies_id'),
    tvShowsID: integer('tv_shows_id'),
    videoGamesID: integer('video_games_id'),
    postsID: integer('posts_id'),
    peopleID: integer('people_id'),
    notesID: integer('notes_id'),
    projectsID: integer('projects_id'),
  },
  (columns) => ({
    order: index('links_rels_order_idx').on(columns.order),
    parentIdx: index('links_rels_parent_idx').on(columns.parent),
    pathIdx: index('links_rels_path_idx').on(columns.path),
    links_rels_books_id_idx: index('links_rels_books_id_idx').on(columns.booksID),
    links_rels_movies_id_idx: index('links_rels_movies_id_idx').on(columns.moviesID),
    links_rels_tv_shows_id_idx: index('links_rels_tv_shows_id_idx').on(columns.tvShowsID),
    links_rels_video_games_id_idx: index('links_rels_video_games_id_idx').on(columns.videoGamesID),
    links_rels_posts_id_idx: index('links_rels_posts_id_idx').on(columns.postsID),
    links_rels_people_id_idx: index('links_rels_people_id_idx').on(columns.peopleID),
    links_rels_notes_id_idx: index('links_rels_notes_id_idx').on(columns.notesID),
    links_rels_projects_id_idx: index('links_rels_projects_id_idx').on(columns.projectsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [links.id],
      name: 'links_rels_parent_fk',
    }).onDelete('cascade'),
    booksIdFk: foreignKey({
      columns: [columns['booksID']],
      foreignColumns: [books.id],
      name: 'links_rels_books_fk',
    }).onDelete('cascade'),
    moviesIdFk: foreignKey({
      columns: [columns['moviesID']],
      foreignColumns: [movies.id],
      name: 'links_rels_movies_fk',
    }).onDelete('cascade'),
    tvShowsIdFk: foreignKey({
      columns: [columns['tvShowsID']],
      foreignColumns: [tv_shows.id],
      name: 'links_rels_tv_shows_fk',
    }).onDelete('cascade'),
    videoGamesIdFk: foreignKey({
      columns: [columns['videoGamesID']],
      foreignColumns: [video_games.id],
      name: 'links_rels_video_games_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'links_rels_posts_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: 'links_rels_people_fk',
    }).onDelete('cascade'),
    notesIdFk: foreignKey({
      columns: [columns['notesID']],
      foreignColumns: [notes.id],
      name: 'links_rels_notes_fk',
    }).onDelete('cascade'),
    projectsIdFk: foreignKey({
      columns: [columns['projectsID']],
      foreignColumns: [projects.id],
      name: 'links_rels_projects_fk',
    }).onDelete('cascade'),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: uniqueIndex('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You've received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_topics = pgTable(
  'search_topics',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_topics_order_idx').on(columns._order),
    _parentIDIdx: index('search_topics_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_topics_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    mediaID: integer('media_id'),
    typesID: integer('types_id'),
    topicsID: integer('topics_id'),
    projectsID: integer('projects_id'),
    usersID: integer('users_id'),
    contactsID: integer('contacts_id'),
    booksID: integer('books_id'),
    moviesID: integer('movies_id'),
    tvShowsID: integer('tv_shows_id'),
    videoGamesID: integer('video_games_id'),
    peopleID: integer('people_id'),
    notesID: integer('notes_id'),
    linksID: integer('links_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_types_id_idx: index(
      'payload_locked_documents_rels_types_id_idx',
    ).on(columns.typesID),
    payload_locked_documents_rels_topics_id_idx: index(
      'payload_locked_documents_rels_topics_id_idx',
    ).on(columns.topicsID),
    payload_locked_documents_rels_projects_id_idx: index(
      'payload_locked_documents_rels_projects_id_idx',
    ).on(columns.projectsID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_contacts_id_idx: index(
      'payload_locked_documents_rels_contacts_id_idx',
    ).on(columns.contactsID),
    payload_locked_documents_rels_books_id_idx: index(
      'payload_locked_documents_rels_books_id_idx',
    ).on(columns.booksID),
    payload_locked_documents_rels_movies_id_idx: index(
      'payload_locked_documents_rels_movies_id_idx',
    ).on(columns.moviesID),
    payload_locked_documents_rels_tv_shows_id_idx: index(
      'payload_locked_documents_rels_tv_shows_id_idx',
    ).on(columns.tvShowsID),
    payload_locked_documents_rels_video_games_id_idx: index(
      'payload_locked_documents_rels_video_games_id_idx',
    ).on(columns.videoGamesID),
    payload_locked_documents_rels_people_id_idx: index(
      'payload_locked_documents_rels_people_id_idx',
    ).on(columns.peopleID),
    payload_locked_documents_rels_notes_id_idx: index(
      'payload_locked_documents_rels_notes_id_idx',
    ).on(columns.notesID),
    payload_locked_documents_rels_links_id_idx: index(
      'payload_locked_documents_rels_links_id_idx',
    ).on(columns.linksID),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    typesIdFk: foreignKey({
      columns: [columns['typesID']],
      foreignColumns: [types.id],
      name: 'payload_locked_documents_rels_types_fk',
    }).onDelete('cascade'),
    topicsIdFk: foreignKey({
      columns: [columns['topicsID']],
      foreignColumns: [topics.id],
      name: 'payload_locked_documents_rels_topics_fk',
    }).onDelete('cascade'),
    projectsIdFk: foreignKey({
      columns: [columns['projectsID']],
      foreignColumns: [projects.id],
      name: 'payload_locked_documents_rels_projects_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    contactsIdFk: foreignKey({
      columns: [columns['contactsID']],
      foreignColumns: [contacts.id],
      name: 'payload_locked_documents_rels_contacts_fk',
    }).onDelete('cascade'),
    booksIdFk: foreignKey({
      columns: [columns['booksID']],
      foreignColumns: [books.id],
      name: 'payload_locked_documents_rels_books_fk',
    }).onDelete('cascade'),
    moviesIdFk: foreignKey({
      columns: [columns['moviesID']],
      foreignColumns: [movies.id],
      name: 'payload_locked_documents_rels_movies_fk',
    }).onDelete('cascade'),
    tvShowsIdFk: foreignKey({
      columns: [columns['tvShowsID']],
      foreignColumns: [tv_shows.id],
      name: 'payload_locked_documents_rels_tv_shows_fk',
    }).onDelete('cascade'),
    videoGamesIdFk: foreignKey({
      columns: [columns['videoGamesID']],
      foreignColumns: [video_games.id],
      name: 'payload_locked_documents_rels_video_games_fk',
    }).onDelete('cascade'),
    peopleIdFk: foreignKey({
      columns: [columns['peopleID']],
      foreignColumns: [people.id],
      name: 'payload_locked_documents_rels_people_fk',
    }).onDelete('cascade'),
    notesIdFk: foreignKey({
      columns: [columns['notesID']],
      foreignColumns: [notes.id],
      name: 'payload_locked_documents_rels_notes_fk',
    }).onDelete('cascade'),
    linksIdFk: foreignKey({
      columns: [columns['linksID']],
      foreignColumns: [links.id],
      name: 'payload_locked_documents_rels_links_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  booksID: one(books, {
    fields: [posts_rels.booksID],
    references: [books.id],
    relationName: 'books',
  }),
  moviesID: one(movies, {
    fields: [posts_rels.moviesID],
    references: [movies.id],
    relationName: 'movies',
  }),
  tvShowsID: one(tv_shows, {
    fields: [posts_rels.tvShowsID],
    references: [tv_shows.id],
    relationName: 'tvShows',
  }),
  videoGamesID: one(video_games, {
    fields: [posts_rels.videoGamesID],
    references: [video_games.id],
    relationName: 'videoGames',
  }),
  topicsID: one(topics, {
    fields: [posts_rels.topicsID],
    references: [topics.id],
    relationName: 'topics',
  }),
  peopleID: one(people, {
    fields: [posts_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
  notesID: one(notes, {
    fields: [posts_rels.notesID],
    references: [notes.id],
    relationName: 'notes',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [posts.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  type: one(types, {
    fields: [posts.type],
    references: [types.id],
    relationName: 'type',
  }),
  project: one(projects, {
    fields: [posts.project],
    references: [projects.id],
    relationName: 'project',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  booksID: one(books, {
    fields: [_posts_v_rels.booksID],
    references: [books.id],
    relationName: 'books',
  }),
  moviesID: one(movies, {
    fields: [_posts_v_rels.moviesID],
    references: [movies.id],
    relationName: 'movies',
  }),
  tvShowsID: one(tv_shows, {
    fields: [_posts_v_rels.tvShowsID],
    references: [tv_shows.id],
    relationName: 'tvShows',
  }),
  videoGamesID: one(video_games, {
    fields: [_posts_v_rels.videoGamesID],
    references: [video_games.id],
    relationName: 'videoGames',
  }),
  topicsID: one(topics, {
    fields: [_posts_v_rels.topicsID],
    references: [topics.id],
    relationName: 'topics',
  }),
  peopleID: one(people, {
    fields: [_posts_v_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
  notesID: one(notes, {
    fields: [_posts_v_rels.notesID],
    references: [notes.id],
    relationName: 'notes',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_posts_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_type: one(types, {
    fields: [_posts_v.version_type],
    references: [types.id],
    relationName: 'version_type',
  }),
  version_project: one(projects, {
    fields: [_posts_v.version_project],
    references: [projects.id],
    relationName: 'version_project',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_types = relations(types, () => ({}))
export const relations_topics_breadcrumbs = relations(topics_breadcrumbs, ({ one }) => ({
  _parentID: one(topics, {
    fields: [topics_breadcrumbs._parentID],
    references: [topics.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(topics, {
    fields: [topics_breadcrumbs.doc],
    references: [topics.id],
    relationName: 'doc',
  }),
}))
export const relations_topics = relations(topics, ({ one, many }) => ({
  parent: one(topics, {
    fields: [topics.parent],
    references: [topics.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(topics_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}))
export const relations_projects_rels = relations(projects_rels, ({ one }) => ({
  parent: one(projects, {
    fields: [projects_rels.parent],
    references: [projects.id],
    relationName: '_rels',
  }),
  contactsID: one(contacts, {
    fields: [projects_rels.contactsID],
    references: [contacts.id],
    relationName: 'contacts',
  }),
}))
export const relations_projects = relations(projects, ({ one, many }) => ({
  image: one(media, {
    fields: [projects.image],
    references: [media.id],
    relationName: 'image',
  }),
  _rels: many(projects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_contacts = relations(contacts, ({ one }) => ({
  project: one(projects, {
    fields: [contacts.project],
    references: [projects.id],
    relationName: 'project',
  }),
}))
export const relations_books_rafas_quotes = relations(books_rafas_quotes, ({ one }) => ({
  _parentID: one(books, {
    fields: [books_rafas_quotes._parentID],
    references: [books.id],
    relationName: 'rafasQuotes',
  }),
}))
export const relations_books_jesss_quotes = relations(books_jesss_quotes, ({ one }) => ({
  _parentID: one(books, {
    fields: [books_jesss_quotes._parentID],
    references: [books.id],
    relationName: 'jesssQuotes',
  }),
}))
export const relations_books_rels = relations(books_rels, ({ one }) => ({
  parent: one(books, {
    fields: [books_rels.parent],
    references: [books.id],
    relationName: '_rels',
  }),
  peopleID: one(people, {
    fields: [books_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
}))
export const relations_books = relations(books, ({ one, many }) => ({
  coverImage: one(media, {
    fields: [books.coverImage],
    references: [media.id],
    relationName: 'coverImage',
  }),
  rafasQuotes: many(books_rafas_quotes, {
    relationName: 'rafasQuotes',
  }),
  jesssQuotes: many(books_jesss_quotes, {
    relationName: 'jesssQuotes',
  }),
  _rels: many(books_rels, {
    relationName: '_rels',
  }),
}))
export const relations__books_v_version_rafas_quotes = relations(
  _books_v_version_rafas_quotes,
  ({ one }) => ({
    _parentID: one(_books_v, {
      fields: [_books_v_version_rafas_quotes._parentID],
      references: [_books_v.id],
      relationName: 'version_rafasQuotes',
    }),
  }),
)
export const relations__books_v_version_jesss_quotes = relations(
  _books_v_version_jesss_quotes,
  ({ one }) => ({
    _parentID: one(_books_v, {
      fields: [_books_v_version_jesss_quotes._parentID],
      references: [_books_v.id],
      relationName: 'version_jesssQuotes',
    }),
  }),
)
export const relations__books_v_rels = relations(_books_v_rels, ({ one }) => ({
  parent: one(_books_v, {
    fields: [_books_v_rels.parent],
    references: [_books_v.id],
    relationName: '_rels',
  }),
  peopleID: one(people, {
    fields: [_books_v_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
}))
export const relations__books_v = relations(_books_v, ({ one, many }) => ({
  parent: one(books, {
    fields: [_books_v.parent],
    references: [books.id],
    relationName: 'parent',
  }),
  version_coverImage: one(media, {
    fields: [_books_v.version_coverImage],
    references: [media.id],
    relationName: 'version_coverImage',
  }),
  version_rafasQuotes: many(_books_v_version_rafas_quotes, {
    relationName: 'version_rafasQuotes',
  }),
  version_jesssQuotes: many(_books_v_version_jesss_quotes, {
    relationName: 'version_jesssQuotes',
  }),
  _rels: many(_books_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_movies_rafas_quotes = relations(movies_rafas_quotes, ({ one }) => ({
  _parentID: one(movies, {
    fields: [movies_rafas_quotes._parentID],
    references: [movies.id],
    relationName: 'rafasQuotes',
  }),
}))
export const relations_movies_jesss_quotes = relations(movies_jesss_quotes, ({ one }) => ({
  _parentID: one(movies, {
    fields: [movies_jesss_quotes._parentID],
    references: [movies.id],
    relationName: 'jesssQuotes',
  }),
}))
export const relations_movies_rels = relations(movies_rels, ({ one }) => ({
  parent: one(movies, {
    fields: [movies_rels.parent],
    references: [movies.id],
    relationName: '_rels',
  }),
  peopleID: one(people, {
    fields: [movies_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
}))
export const relations_movies = relations(movies, ({ one, many }) => ({
  coverImage: one(media, {
    fields: [movies.coverImage],
    references: [media.id],
    relationName: 'coverImage',
  }),
  rafasQuotes: many(movies_rafas_quotes, {
    relationName: 'rafasQuotes',
  }),
  jesssQuotes: many(movies_jesss_quotes, {
    relationName: 'jesssQuotes',
  }),
  _rels: many(movies_rels, {
    relationName: '_rels',
  }),
}))
export const relations_tv_shows_rafas_quotes = relations(tv_shows_rafas_quotes, ({ one }) => ({
  _parentID: one(tv_shows, {
    fields: [tv_shows_rafas_quotes._parentID],
    references: [tv_shows.id],
    relationName: 'rafasQuotes',
  }),
}))
export const relations_tv_shows_jesss_quotes = relations(tv_shows_jesss_quotes, ({ one }) => ({
  _parentID: one(tv_shows, {
    fields: [tv_shows_jesss_quotes._parentID],
    references: [tv_shows.id],
    relationName: 'jesssQuotes',
  }),
}))
export const relations_tv_shows_rels = relations(tv_shows_rels, ({ one }) => ({
  parent: one(tv_shows, {
    fields: [tv_shows_rels.parent],
    references: [tv_shows.id],
    relationName: '_rels',
  }),
  peopleID: one(people, {
    fields: [tv_shows_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
}))
export const relations_tv_shows = relations(tv_shows, ({ one, many }) => ({
  coverImage: one(media, {
    fields: [tv_shows.coverImage],
    references: [media.id],
    relationName: 'coverImage',
  }),
  rafasQuotes: many(tv_shows_rafas_quotes, {
    relationName: 'rafasQuotes',
  }),
  jesssQuotes: many(tv_shows_jesss_quotes, {
    relationName: 'jesssQuotes',
  }),
  _rels: many(tv_shows_rels, {
    relationName: '_rels',
  }),
}))
export const relations_video_games_rafas_quotes = relations(
  video_games_rafas_quotes,
  ({ one }) => ({
    _parentID: one(video_games, {
      fields: [video_games_rafas_quotes._parentID],
      references: [video_games.id],
      relationName: 'rafasQuotes',
    }),
  }),
)
export const relations_video_games_jesss_quotes = relations(
  video_games_jesss_quotes,
  ({ one }) => ({
    _parentID: one(video_games, {
      fields: [video_games_jesss_quotes._parentID],
      references: [video_games.id],
      relationName: 'jesssQuotes',
    }),
  }),
)
export const relations_video_games_rels = relations(video_games_rels, ({ one }) => ({
  parent: one(video_games, {
    fields: [video_games_rels.parent],
    references: [video_games.id],
    relationName: '_rels',
  }),
  peopleID: one(people, {
    fields: [video_games_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
}))
export const relations_video_games = relations(video_games, ({ one, many }) => ({
  coverImage: one(media, {
    fields: [video_games.coverImage],
    references: [media.id],
    relationName: 'coverImage',
  }),
  rafasQuotes: many(video_games_rafas_quotes, {
    relationName: 'rafasQuotes',
  }),
  jesssQuotes: many(video_games_jesss_quotes, {
    relationName: 'jesssQuotes',
  }),
  _rels: many(video_games_rels, {
    relationName: '_rels',
  }),
}))
export const relations_people_roles = relations(people_roles, ({ one }) => ({
  parent: one(people, {
    fields: [people_roles.parent],
    references: [people.id],
    relationName: 'roles',
  }),
}))
export const relations_people = relations(people, ({ one, many }) => ({
  photo: one(media, {
    fields: [people.photo],
    references: [media.id],
    relationName: 'photo',
  }),
  roles: many(people_roles, {
    relationName: 'roles',
  }),
}))
export const relations_notes_rels = relations(notes_rels, ({ one }) => ({
  parent: one(notes, {
    fields: [notes_rels.parent],
    references: [notes.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [notes_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  booksID: one(books, {
    fields: [notes_rels.booksID],
    references: [books.id],
    relationName: 'books',
  }),
  moviesID: one(movies, {
    fields: [notes_rels.moviesID],
    references: [movies.id],
    relationName: 'movies',
  }),
  tvShowsID: one(tv_shows, {
    fields: [notes_rels.tvShowsID],
    references: [tv_shows.id],
    relationName: 'tvShows',
  }),
  videoGamesID: one(video_games, {
    fields: [notes_rels.videoGamesID],
    references: [video_games.id],
    relationName: 'videoGames',
  }),
  peopleID: one(people, {
    fields: [notes_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
  notesID: one(notes, {
    fields: [notes_rels.notesID],
    references: [notes.id],
    relationName: 'notes',
  }),
}))
export const relations_notes = relations(notes, ({ many }) => ({
  _rels: many(notes_rels, {
    relationName: '_rels',
  }),
}))
export const relations__notes_v_rels = relations(_notes_v_rels, ({ one }) => ({
  parent: one(_notes_v, {
    fields: [_notes_v_rels.parent],
    references: [_notes_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_notes_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  booksID: one(books, {
    fields: [_notes_v_rels.booksID],
    references: [books.id],
    relationName: 'books',
  }),
  moviesID: one(movies, {
    fields: [_notes_v_rels.moviesID],
    references: [movies.id],
    relationName: 'movies',
  }),
  tvShowsID: one(tv_shows, {
    fields: [_notes_v_rels.tvShowsID],
    references: [tv_shows.id],
    relationName: 'tvShows',
  }),
  videoGamesID: one(video_games, {
    fields: [_notes_v_rels.videoGamesID],
    references: [video_games.id],
    relationName: 'videoGames',
  }),
  peopleID: one(people, {
    fields: [_notes_v_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
  notesID: one(notes, {
    fields: [_notes_v_rels.notesID],
    references: [notes.id],
    relationName: 'notes',
  }),
}))
export const relations__notes_v = relations(_notes_v, ({ one, many }) => ({
  parent: one(notes, {
    fields: [_notes_v.parent],
    references: [notes.id],
    relationName: 'parent',
  }),
  _rels: many(_notes_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_links_rels = relations(links_rels, ({ one }) => ({
  parent: one(links, {
    fields: [links_rels.parent],
    references: [links.id],
    relationName: '_rels',
  }),
  booksID: one(books, {
    fields: [links_rels.booksID],
    references: [books.id],
    relationName: 'books',
  }),
  moviesID: one(movies, {
    fields: [links_rels.moviesID],
    references: [movies.id],
    relationName: 'movies',
  }),
  tvShowsID: one(tv_shows, {
    fields: [links_rels.tvShowsID],
    references: [tv_shows.id],
    relationName: 'tvShows',
  }),
  videoGamesID: one(video_games, {
    fields: [links_rels.videoGamesID],
    references: [video_games.id],
    relationName: 'videoGames',
  }),
  postsID: one(posts, {
    fields: [links_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  peopleID: one(people, {
    fields: [links_rels.peopleID],
    references: [people.id],
    relationName: 'people',
  }),
  notesID: one(notes, {
    fields: [links_rels.notesID],
    references: [notes.id],
    relationName: 'notes',
  }),
  projectsID: one(projects, {
    fields: [links_rels.projectsID],
    references: [projects.id],
    relationName: 'projects',
  }),
}))
export const relations_links = relations(links, ({ many }) => ({
  _rels: many(links_rels, {
    relationName: '_rels',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_topics = relations(search_topics, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_topics._parentID],
    references: [search.id],
    relationName: 'topics',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  topics: many(search_topics, {
    relationName: 'topics',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    typesID: one(types, {
      fields: [payload_locked_documents_rels.typesID],
      references: [types.id],
      relationName: 'types',
    }),
    topicsID: one(topics, {
      fields: [payload_locked_documents_rels.topicsID],
      references: [topics.id],
      relationName: 'topics',
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: 'projects',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    contactsID: one(contacts, {
      fields: [payload_locked_documents_rels.contactsID],
      references: [contacts.id],
      relationName: 'contacts',
    }),
    booksID: one(books, {
      fields: [payload_locked_documents_rels.booksID],
      references: [books.id],
      relationName: 'books',
    }),
    moviesID: one(movies, {
      fields: [payload_locked_documents_rels.moviesID],
      references: [movies.id],
      relationName: 'movies',
    }),
    tvShowsID: one(tv_shows, {
      fields: [payload_locked_documents_rels.tvShowsID],
      references: [tv_shows.id],
      relationName: 'tvShows',
    }),
    videoGamesID: one(video_games, {
      fields: [payload_locked_documents_rels.videoGamesID],
      references: [video_games.id],
      relationName: 'videoGames',
    }),
    peopleID: one(people, {
      fields: [payload_locked_documents_rels.peopleID],
      references: [people.id],
      relationName: 'people',
    }),
    notesID: one(notes, {
      fields: [payload_locked_documents_rels.notesID],
      references: [notes.id],
      relationName: 'notes',
    }),
    linksID: one(links, {
      fields: [payload_locked_documents_rels.linksID],
      references: [links.id],
      relationName: 'links',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_posts_type_select: typeof enum_posts_type_select
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_type_select: typeof enum__posts_v_version_type_select
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum_contacts_status: typeof enum_contacts_status
  enum_books_status: typeof enum_books_status
  enum__books_v_version_status: typeof enum__books_v_version_status
  enum_people_roles: typeof enum_people_roles
  enum_notes_author: typeof enum_notes_author
  enum_notes_visibility: typeof enum_notes_visibility
  enum_notes_status: typeof enum_notes_status
  enum__notes_v_version_author: typeof enum__notes_v_version_author
  enum__notes_v_version_visibility: typeof enum__notes_v_version_visibility
  enum__notes_v_version_status: typeof enum__notes_v_version_status
  enum_links_reference_type: typeof enum_links_reference_type
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_rels: typeof _posts_v_rels
  media: typeof media
  types: typeof types
  topics_breadcrumbs: typeof topics_breadcrumbs
  topics: typeof topics
  projects: typeof projects
  projects_rels: typeof projects_rels
  users_sessions: typeof users_sessions
  users: typeof users
  contacts: typeof contacts
  books_rafas_quotes: typeof books_rafas_quotes
  books_jesss_quotes: typeof books_jesss_quotes
  books: typeof books
  books_rels: typeof books_rels
  _books_v_version_rafas_quotes: typeof _books_v_version_rafas_quotes
  _books_v_version_jesss_quotes: typeof _books_v_version_jesss_quotes
  _books_v: typeof _books_v
  _books_v_rels: typeof _books_v_rels
  movies_rafas_quotes: typeof movies_rafas_quotes
  movies_jesss_quotes: typeof movies_jesss_quotes
  movies: typeof movies
  movies_rels: typeof movies_rels
  tv_shows_rafas_quotes: typeof tv_shows_rafas_quotes
  tv_shows_jesss_quotes: typeof tv_shows_jesss_quotes
  tv_shows: typeof tv_shows
  tv_shows_rels: typeof tv_shows_rels
  video_games_rafas_quotes: typeof video_games_rafas_quotes
  video_games_jesss_quotes: typeof video_games_jesss_quotes
  video_games: typeof video_games
  video_games_rels: typeof video_games_rels
  people_roles: typeof people_roles
  people: typeof people
  notes: typeof notes
  notes_rels: typeof notes_rels
  _notes_v: typeof _notes_v
  _notes_v_rels: typeof _notes_v_rels
  links: typeof links
  links_rels: typeof links_rels
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_topics: typeof search_topics
  search: typeof search
  search_rels: typeof search_rels
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_media: typeof relations_media
  relations_types: typeof relations_types
  relations_topics_breadcrumbs: typeof relations_topics_breadcrumbs
  relations_topics: typeof relations_topics
  relations_projects_rels: typeof relations_projects_rels
  relations_projects: typeof relations_projects
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_contacts: typeof relations_contacts
  relations_books_rafas_quotes: typeof relations_books_rafas_quotes
  relations_books_jesss_quotes: typeof relations_books_jesss_quotes
  relations_books_rels: typeof relations_books_rels
  relations_books: typeof relations_books
  relations__books_v_version_rafas_quotes: typeof relations__books_v_version_rafas_quotes
  relations__books_v_version_jesss_quotes: typeof relations__books_v_version_jesss_quotes
  relations__books_v_rels: typeof relations__books_v_rels
  relations__books_v: typeof relations__books_v
  relations_movies_rafas_quotes: typeof relations_movies_rafas_quotes
  relations_movies_jesss_quotes: typeof relations_movies_jesss_quotes
  relations_movies_rels: typeof relations_movies_rels
  relations_movies: typeof relations_movies
  relations_tv_shows_rafas_quotes: typeof relations_tv_shows_rafas_quotes
  relations_tv_shows_jesss_quotes: typeof relations_tv_shows_jesss_quotes
  relations_tv_shows_rels: typeof relations_tv_shows_rels
  relations_tv_shows: typeof relations_tv_shows
  relations_video_games_rafas_quotes: typeof relations_video_games_rafas_quotes
  relations_video_games_jesss_quotes: typeof relations_video_games_jesss_quotes
  relations_video_games_rels: typeof relations_video_games_rels
  relations_video_games: typeof relations_video_games
  relations_people_roles: typeof relations_people_roles
  relations_people: typeof relations_people
  relations_notes_rels: typeof relations_notes_rels
  relations_notes: typeof relations_notes
  relations__notes_v_rels: typeof relations__notes_v_rels
  relations__notes_v: typeof relations__notes_v
  relations_links_rels: typeof relations_links_rels
  relations_links: typeof relations_links
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_topics: typeof relations_search_topics
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-vercel-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
